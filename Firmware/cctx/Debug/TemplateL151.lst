
TemplateL151.elf:     file format elf32-littlearm
TemplateL151.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080007c1

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00001492 memsz 0x00001498 flags rwx
    LOAD off    0x00010800 vaddr 0x20000800 paddr 0x08001498 align 2**15
         filesz 0x00000000 memsz 0x00000810 flags rw-
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x20000000 align 2**15
         filesz 0x00000000 memsz 0x00000800 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 startup       000000f4  08000000  08000000  00008000  2**4  CONTENTS, ALLOC, LOAD, DATA
  1 constructors  00000004  080000f4  080000f4  000080f4  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001392  08000100  08000100  00008100  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .textalign    00000006  08001492  08001492  00009492  2**0  ALLOC
  4 .stacks       00000800  20000000  20000000  00010000  2**0  ALLOC
  5 .bss          00000810  20000800  08001498  00010800  2**3  ALLOC
  6 .debug_info   0000abe3  00000000  00000000  00009492  2**0  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000272b  00000000  00000000  00014075  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002cd2  00000000  00000000  000167a0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  00019472  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000828  00000000  00000000  000199aa  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000232b  00000000  00000000  0001a1d2  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002954  00000000  00000000  0001c4fd  2**0  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  0001ee51  2**0  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  0001eec1  2**0  CONTENTS, READONLY
 15 .debug_frame  00000b6c  00000000  00000000  0001eef4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  startup	00000000 startup
080000f4 l    d  constructors	00000000 constructors
08000100 l    d  .text	00000000 .text
08001492 l    d  .textalign	00000000 .textalign
20000000 l    d  .stacks	00000000 .stacks
20000800 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vectors.c
00000000 l    df *ABS*	00000000 cmd_uart.cpp
08000cf0 l     F .text	0000000c FPutChar(char)
08000100 l     F .text	00000024 _GLOBAL__sub_I_Uart
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 chschd.c
08000260 l     F .text	00000034 wakeup
00000000 l    df *ABS*	00000000 chsys.c
20000800 l     O .bss	00000028 mainthread.4583
00000000 l    df *ABS*	00000000 chthreads.c
00000000 l    df *ABS*	00000000 chvt.c
00000000 l    df *ABS*	00000000 chcore_v7m.c
08000674 l       .text	00000000 _port_exit_from_isr
00000000 l    df *ABS*	00000000 crt0.c
00000000 l    df *ABS*	00000000 hal.c
00000000 l    df *ABS*	00000000 hal_lld.cpp
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 stm32_dma.c
20000828 l     O .bss	00000038 dma_isr_redir
20000860 l     O .bss	00000004 dma_streams_mask
00000000 l    df *ABS*	00000000 clocking_L1xx.cpp
00000000 l    df *ABS*	00000000 kl_lib_L15x.cpp
08000fa0 l     F .text	0000001c CmdUart_t::PrintNow(char const*) [clone .isra.12]
00000000 l    df *ABS*	00000000 kl_sprintf.c
08000ff0 l     F .text	00000072 IPutUint.4105
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 chregistry.c
00000000 l    df *ABS*	00000000 
20001010 l       .bss	00000000 __heap_base__
08001498 l       .textalign	00000000 _etext
00000000 l       *UND*	00000000 App
20004000 l       *ABS*	00000000 __heap_end__
00004000 l       *ABS*	00000000 __ram_size__
00000000 l       startup	00000000 _text
20000000 l       startup	00000000 __ram_start__
20004000 l       *ABS*	00000000 __ram_end__
20001010 l       .bss	00000000 _end
00000400 l       *ABS*	00000000 __main_stack_size__
00000400 l       *ABS*	00000000 __process_stack_size__
08000ba0  w    F .text	00000002 Vector58
08000ba0  w    F .text	00000002 VectorE8
08000ba0  w    F .text	00000002 Vector9C
08000900 g     F .text	00000046 nvicEnableVector
08000ba0  w    F .text	00000002 VectorAC
080005b0 g     F .text	0000000a chThdExit
08000450 g     F .text	00000050 chSysTimerHandlerI
080002c0 g     F .text	0000003c chSchGoSleepTimeoutS
08000ba0  w    F .text	00000002 Vector5C
08000ba0  w    F .text	00000002 NMIVector
08000ad0 g     F .text	00000038 dmaInit
08000ba0  w    F .text	00000002 Vector8C
08000ba0  w    F .text	00000002 VectorDC
08000000 g     O startup	000000f4 _vectors
080002a0 g     F .text	00000020 chSchGoSleepS
08000d00 g     F .text	0000003c CmdUart_t::ISendViaDMA()
080004d0 g     F .text	00000048 chThdCreateI
08000ba0  w    F .text	00000002 VectorC8
08000300 g     F .text	00000038 chSchWakeupS
08000200 g     F .text	00000014 _scheduler_init
08000520 g     F .text	00000028 chThdCreateStatic
08000ba0  w    F .text	00000002 Vector94
08000ba0  w    F .text	00000002 VectorA8
08000ba0  w    F .text	00000002 VectorB4
08000220 g     F .text	00000038 chSchReadyI
080000f8 g       constructors	00000000 __fini_array_end
20000800 g       .stacks	00000000 __main_thread_stack_end__
080005c0 g     F .text	00000018 _vt_init
080009e0 g     F .text	0000002c Vector74
08000880 g     F .text	00000004 halInit
08000ba0  w    F .text	00000002 VectorEC
20000800 g       .bss	00000000 _bss_start
08000340 g     F .text	00000030 chSchDoRescheduleBehind
08000ba0  w    F .text	00000002 UsageFaultVector
08000ba0  w    F .text	00000002 DebugMonitorVector
08000ba0  w    F .text	00000002 Vector40
080007c0 g     F .text	000000c0 ResetHandler
08000ba0  w    F .text	00000002 VectorBC
080006a0 g     F .text	00000034 _port_init
08000890 g     F .text	00000064 hal_lld_init
08000580 g     F .text	00000030 chThdExitS
08000d40 g     F .text	0000003c CmdUart_t::IPrintf(char const*, std::__va_list)
08000ba0  w    F .text	00000002 PendSVVector
080005e0 g     F .text	0000004c chVTSetI
08000ba0  w    F .text	00000002 Vector64
20001010 g       .bss	00000000 _bss_end
080007b0  w    F .text	00000002 _default_exit
08000f30 g     F .text	00000054 CmdUart_t::IRQDmaTxHandler()
08000ba0  w    F .text	00000002 VectorCC
08000ba0  w    F .text	00000002 Vector54
08000ba0  w    F .text	00000002 Vector98
08000ba0  w    F .text	00000002 VectorD8
08000ba0  w    F .text	00000002 Vector24
080003b0 g     F .text	00000014 chSchDoReschedule
080003f0 g     F .text	00000058 chSysInit
08000550 g     F .text	00000028 chThdSleep
080013d0 g     O .text	00000054 _stm32_dma_streams
08000aa0 g     F .text	0000002c Vector84
08000750 g     F .text	0000001a SysTickVector
20000870 g     O .bss	000006d0 Uart
08000ba0  w    F .text	00000002 BusFaultVector
08000ba0  w    F .text	00000002 VectorD0
08000bb0 g     F .text	00000114 Clk_t::UpdateFreqValues()
08000ba0  w    F .text	00000002 VectorE4
08000ba0  w    F .text	00000002 VectorC0
08000770 g     F .text	00000010 _port_switch
08000680 g     F .text	00000012 SVCallVector
080007a0  w    F .text	00000002 __late_init
08000fc0 g     F .text	0000002c chDbgPanic
20001000 g     O .bss	00000010 vtlist
08000ba0  w    F .text	00000002 HardFaultVector
080006e0 g     F .text	00000068 _port_irq_epilogue
08000db0 g     F .text	00000174 CmdUart_t::Init(unsigned long)
08000ba0  w    F .text	00000002 VectorF0
20000864 g     O .bss	0000000c Clk
08001498 g       .textalign	00000000 _textdata
08000ba0  w    F .text	00000002 VectorE0
08000ba0  w    F .text	00000002 MemManageVector
080000f8 g       constructors	00000000 __fini_array_start
080011d0 g     F .text	00000094 memset
08000130 g     F .text	000000d0 main
08000980 g     F .text	00000028 Vector6C
20000f40 g     O .bss	0000001c rlist
08000ba0  w    F .text	00000002 VectorA0
080000f8 g       constructors	00000000 __init_array_end
08000ba0  w    F .text	00000002 VectorC4
08000a40 g     F .text	0000002c Vector7C
080003d0 g     F .text	00000014 _idle_thread
08000ba0  w    F .text	00000002 VectorB0
080012a0 g     O .text	00000016 ch_debug
08000ba0  w    F .text	00000002 Vector90
08000d80 g     F .text	00000026 CmdUart_t::Printf(char const*, ...)
08000780 g     F .text	00000010 _port_thread_start
08000ba0  w    F .text	00000002 Vector60
08000ba0  w    F .text	00000002 Vector1C
08000370 g     F .text	00000038 chSchDoRescheduleAhead
08000ba0  w    F .text	00000002 Vector48
20000400 g       .stacks	00000000 __process_stack_base__
080009b0 g     F .text	00000028 Vector70
08000ba0  w    F .text	00000002 VectorD4
08000950 g     F .text	00000026 nvicSetSystemHandlerPriority
08001070 g     F .text	00000160 kl_vsprintf
20000f60 g     O .bss	000000a0 _idle_thread_wa
20000800 g       .bss	00000000 _data
08000f90 g     F .text	0000000c CmdUartTxIrq
08000ba0  w    F .text	00000002 Vector4C
08000a70 g     F .text	0000002c Vector80
08000670 g     F .text	00000006 _port_switch_from_isr
08000ba0  w    F .text	00000002 Vector68
20000400 g       .stacks	00000000 __main_stack_end__
08000a10 g     F .text	0000002c Vector78
20000800 g       .bss	00000000 _edata
08000630 g     F .text	00000040 chVTResetI
08000ba0 g     F .text	00000002 _unhandled_exception
08000ba0  w    F .text	00000002 Vector88
20000400 g       .stacks	00000000 __main_thread_stack_base__
080000f4 g       constructors	00000000 __init_array_start
080004a0 g     F .text	00000024 _thread_init
08000ba0  w    F .text	00000002 Vector50
08000b10 g     F .text	00000088 dmaStreamAllocate
20000000 g       .stacks	00000000 __main_stack_base__
08000ba0  w    F .text	00000002 Vector44
08000ba0  w    F .text	00000002 Vector28
08000ba0  w    F .text	00000002 VectorB8
08000cd0 g     F .text	0000001e CmdUart_t::IPutChar(char)
20000800 g       .stacks	00000000 __process_stack_end__
08000ba0  w    F .text	00000002 Vector34
08000790  w    F .text	00000002 __early_init
08000ba0  w    F .text	00000002 VectorA4
08000ba0  w    F .text	00000002 Vector20



Disassembly of section .text:

08000100 <_GLOBAL__sub_I_Uart>:
CmdUart_t():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:81
    uint8_t TryConvertTokenToNumber( int32_t *POutput) { return Convert::TryStrToInt32(Token, POutput); }
    bool NameIs(const char *SCmd) { return (strcasecmp(Name, SCmd) == 0); }
    friend class CmdUart_t;
};

class CmdUart_t {
 8000100:	4b07      	ldr	r3, [pc, #28]	; (8000120 <_GLOBAL__sub_I_Uart+0x20>)
 8000102:	2200      	movs	r2, #0
 8000104:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
 8000108:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
 800010c:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
 8000110:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
 8000114:	f203 6284 	addw	r2, r3, #1668	; 0x684
 8000118:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
 800011c:	4770      	bx	lr
 800011e:	bf00      	nop
 8000120:	20000870 	.word	0x20000870
	...

08000130 <main>:
main():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:32

//Timer_t Tmr;

//#define MAX_TMR 10000

int main(void) {
 8000130:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:37
    // ==== Init Vcore & clock system ====
   /* SetupVCore(vcore1V5);
    Clk.EnableHSI();
    Clk.SwitchToHSI();*/
    Clk.UpdateFreqValues();
 8000132:	482e      	ldr	r0, [pc, #184]	; (80001ec <main+0xbc>)
 8000134:	f000 fd3c 	bl	8000bb0 <Clk_t::UpdateFreqValues()>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:40

    // ==== Init OS ====
    halInit();
 8000138:	f000 fba2 	bl	8000880 <halInit>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:41
    chSysInit();
 800013c:	f000 f958 	bl	80003f0 <chSysInit>
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:183
// Check state
static inline bool PinIsSet(GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { return (PGpioPort->IDR & (uint32_t)(1<<APinNumber)); }
// Setup
static inline void PinClockEnable(GPIO_TypeDef *PGpioPort) {
    if     (PGpioPort == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if(PGpioPort == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000140:	492b      	ldr	r1, [pc, #172]	; (80001f0 <main+0xc0>)
main():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:47

    // ==== Init Hard & Soft ====
    PinSetupOut(GPIOB, 1, omPushPull, pudNone);
    PinSetupOut(GPIOB, 0, omPushPull, pudNone);

    Uart.Init(9600);
 8000142:	482c      	ldr	r0, [pc, #176]	; (80001f4 <main+0xc4>)
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:183
 8000144:	69cb      	ldr	r3, [r1, #28]
 8000146:	f043 0302 	orr.w	r3, r3, #2
 800014a:	61cb      	str	r3, [r1, #28]
PinSetupOut():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:198
        ) {
    // Clock
    PinClockEnable(PGpioPort);
    uint8_t Offset = APinNumber*2;
    // Setup mode
    PGpioPort->MODER &= ~(0b11 << Offset);  // clear previous bits
 800014c:	4b2a      	ldr	r3, [pc, #168]	; (80001f8 <main+0xc8>)
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	f022 020c 	bic.w	r2, r2, #12
 8000154:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:199
    PGpioPort->MODER |=   0b01 << Offset;   // Set new bits
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	f042 0204 	orr.w	r2, r2, #4
 800015c:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:201
    // Setup output type
    PGpioPort->OTYPER &= ~(1<<APinNumber);
 800015e:	889a      	ldrh	r2, [r3, #4]
 8000160:	f022 0202 	bic.w	r2, r2, #2
 8000164:	0412      	lsls	r2, r2, #16
 8000166:	0c12      	lsrs	r2, r2, #16
 8000168:	809a      	strh	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:202
    PGpioPort->OTYPER |= (uint32_t)PinOutMode << APinNumber;
 800016a:	889a      	ldrh	r2, [r3, #4]
 800016c:	b292      	uxth	r2, r2
 800016e:	809a      	strh	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:204
    // Setup Pull-Up or Pull-Down
    PGpioPort->PUPDR &= ~(0b11 << Offset); // clear previous bits
 8000170:	68da      	ldr	r2, [r3, #12]
 8000172:	f022 020c 	bic.w	r2, r2, #12
 8000176:	60da      	str	r2, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:205
    PGpioPort->PUPDR |= (uint32_t)APullUpDown << Offset;
 8000178:	68da      	ldr	r2, [r3, #12]
 800017a:	60da      	str	r2, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:207
    // Setup speed
    PGpioPort->OSPEEDR &= ~(0b11 << Offset); // clear previous bits
 800017c:	689a      	ldr	r2, [r3, #8]
 800017e:	f022 020c 	bic.w	r2, r2, #12
 8000182:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:208
    PGpioPort->OSPEEDR |= (uint32_t)ASpeed << Offset;
 8000184:	689a      	ldr	r2, [r3, #8]
 8000186:	f042 020c 	orr.w	r2, r2, #12
 800018a:	609a      	str	r2, [r3, #8]
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:183
// Check state
static inline bool PinIsSet(GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { return (PGpioPort->IDR & (uint32_t)(1<<APinNumber)); }
// Setup
static inline void PinClockEnable(GPIO_TypeDef *PGpioPort) {
    if     (PGpioPort == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if(PGpioPort == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800018c:	69ca      	ldr	r2, [r1, #28]
 800018e:	f042 0202 	orr.w	r2, r2, #2
 8000192:	61ca      	str	r2, [r1, #28]
PinSetupOut():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:198
        ) {
    // Clock
    PinClockEnable(PGpioPort);
    uint8_t Offset = APinNumber*2;
    // Setup mode
    PGpioPort->MODER &= ~(0b11 << Offset);  // clear previous bits
 8000194:	681a      	ldr	r2, [r3, #0]
main():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:47
 8000196:	f44f 5116 	mov.w	r1, #9600	; 0x2580
PinSetupOut():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:198
 800019a:	f022 0203 	bic.w	r2, r2, #3
 800019e:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:199
    PGpioPort->MODER |=   0b01 << Offset;   // Set new bits
 80001a0:	681a      	ldr	r2, [r3, #0]
 80001a2:	f042 0201 	orr.w	r2, r2, #1
 80001a6:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:201
    // Setup output type
    PGpioPort->OTYPER &= ~(1<<APinNumber);
 80001a8:	889a      	ldrh	r2, [r3, #4]
 80001aa:	f022 0201 	bic.w	r2, r2, #1
 80001ae:	0412      	lsls	r2, r2, #16
 80001b0:	0c12      	lsrs	r2, r2, #16
 80001b2:	809a      	strh	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:202
    PGpioPort->OTYPER |= (uint32_t)PinOutMode << APinNumber;
 80001b4:	889a      	ldrh	r2, [r3, #4]
 80001b6:	b292      	uxth	r2, r2
 80001b8:	809a      	strh	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:204
    // Setup Pull-Up or Pull-Down
    PGpioPort->PUPDR &= ~(0b11 << Offset); // clear previous bits
 80001ba:	68da      	ldr	r2, [r3, #12]
 80001bc:	f022 0203 	bic.w	r2, r2, #3
 80001c0:	60da      	str	r2, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:205
    PGpioPort->PUPDR |= (uint32_t)APullUpDown << Offset;
 80001c2:	68da      	ldr	r2, [r3, #12]
 80001c4:	60da      	str	r2, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:207
    // Setup speed
    PGpioPort->OSPEEDR &= ~(0b11 << Offset); // clear previous bits
 80001c6:	689a      	ldr	r2, [r3, #8]
 80001c8:	f022 0203 	bic.w	r2, r2, #3
 80001cc:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:208
    PGpioPort->OSPEEDR |= (uint32_t)ASpeed << Offset;
 80001ce:	689a      	ldr	r2, [r3, #8]
 80001d0:	f042 0203 	orr.w	r2, r2, #3
 80001d4:	609a      	str	r2, [r3, #8]
main():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:47
 80001d6:	f000 fdeb 	bl	8000db0 <CmdUart_t::Init(unsigned long)>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:50 (discriminator 1)
    // ==== Main cycle ====
    while(true) {
        chThdSleepMilliseconds(999);
 80001da:	f240 30e7 	movw	r0, #999	; 0x3e7
 80001de:	f000 f9b7 	bl	8000550 <chThdSleep>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../main.cpp:52 (discriminator 1)

        Uart.Printf("Hello STM32L151!\n");
 80001e2:	4804      	ldr	r0, [pc, #16]	; (80001f4 <main+0xc4>)
 80001e4:	4905      	ldr	r1, [pc, #20]	; (80001fc <main+0xcc>)
 80001e6:	f000 fdcb 	bl	8000d80 <CmdUart_t::Printf(char const*, ...)>
 80001ea:	e7f6      	b.n	80001da <main+0xaa>
 80001ec:	20000864 	.word	0x20000864
 80001f0:	40023800 	.word	0x40023800
 80001f4:	20000870 	.word	0x20000870
 80001f8:	40020400 	.word	0x40020400
 80001fc:	08001480 	.word	0x08001480

08000200 <_scheduler_init>:
_scheduler_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:57
 *
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&rlist.r_queue);
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <_scheduler_init+0x10>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:58
  rlist.r_prio = NOPRIO;
 8000202:	2200      	movs	r2, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:57
 *
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&rlist.r_queue);
 8000204:	605b      	str	r3, [r3, #4]
 8000206:	601b      	str	r3, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:58
  rlist.r_prio = NOPRIO;
 8000208:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:60
#if CH_USE_REGISTRY
  rlist.r_newer = rlist.r_older = (Thread *)&rlist;
 800020a:	615b      	str	r3, [r3, #20]
 800020c:	611b      	str	r3, [r3, #16]
 800020e:	4770      	bx	lr
 8000210:	20000f40 	.word	0x20000f40
	...

08000220 <chSchReadyI>:
chSchReadyI():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:81
 * @return              The thread pointer.
 *
 * @iclass
 */
#if !defined(PORT_OPTIMIZED_READYI) || defined(__DOXYGEN__)
Thread *chSchReadyI(Thread *tp) {
 8000220:	b510      	push	{r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:87
  Thread *cp;

  chDbgCheckClassI();

  /* Integrity checks.*/
  chDbgAssert((tp->p_state != THD_STATE_READY) &&
 8000222:	7f03      	ldrb	r3, [r0, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:81
 * @return              The thread pointer.
 *
 * @iclass
 */
#if !defined(PORT_OPTIMIZED_READYI) || defined(__DOXYGEN__)
Thread *chSchReadyI(Thread *tp) {
 8000224:	4604      	mov	r4, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:87
  Thread *cp;

  chDbgCheckClassI();

  /* Integrity checks.*/
  chDbgAssert((tp->p_state != THD_STATE_READY) &&
 8000226:	b10b      	cbz	r3, 800022c <chSchReadyI+0xc>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:87 (discriminator 2)
 8000228:	2b0e      	cmp	r3, #14
 800022a:	d102      	bne.n	8000232 <chSchReadyI+0x12>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:87 (discriminator 1)
 800022c:	4808      	ldr	r0, [pc, #32]	; (8000250 <chSchReadyI+0x30>)
 800022e:	f000 fec7 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:92
              (tp->p_state != THD_STATE_FINAL),
              "chSchReadyI(), #1",
              "invalid state");

  tp->p_state = THD_STATE_READY;
 8000232:	2300      	movs	r3, #0
 8000234:	7723      	strb	r3, [r4, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:96
  cp = (Thread *)&rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8000236:	68a1      	ldr	r1, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:93
              (tp->p_state != THD_STATE_FINAL),
              "chSchReadyI(), #1",
              "invalid state");

  tp->p_state = THD_STATE_READY;
  cp = (Thread *)&rlist.r_queue;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <chSchReadyI+0x34>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:95 (discriminator 1)
  do {
    cp = cp->p_next;
 800023a:	681b      	ldr	r3, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:96 (discriminator 1)
  } while (cp->p_prio >= tp->p_prio);
 800023c:	689a      	ldr	r2, [r3, #8]
 800023e:	428a      	cmp	r2, r1
 8000240:	d2fb      	bcs.n	800023a <chSchReadyI+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:99
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000242:	685a      	ldr	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:98
  cp = (Thread *)&rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000244:	6023      	str	r3, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:99
  tp->p_prev = cp->p_prev;
 8000246:	6062      	str	r2, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:102
  tp->p_prev->p_next = cp->p_prev = tp;
  return tp;
}
 8000248:	4620      	mov	r0, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:100
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = cp->p_prev = tp;
 800024a:	605c      	str	r4, [r3, #4]
 800024c:	6014      	str	r4, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:102
  return tp;
}
 800024e:	bd10      	pop	{r4, pc}
 8000250:	080012c0 	.word	0x080012c0
 8000254:	20000f40 	.word	0x20000f40
	...

08000260 <wakeup>:
wakeup():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:136

#if !defined(PORT_OPTIMIZED_GOSLEEPTIMEOUTS) || defined(__DOXYGEN__)
/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000260:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:139
  Thread *tp = (Thread *)p;

  chSysLockFromIsr();
 8000262:	2320      	movs	r3, #32
 8000264:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:140
  switch (tp->p_state) {
 8000268:	7f03      	ldrb	r3, [r0, #28]
 800026a:	b183      	cbz	r3, 800028e <wakeup+0x2e>
 800026c:	2b03      	cmp	r3, #3
 800026e:	d108      	bne.n	8000282 <wakeup+0x22>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:150
    return;
#if CH_USE_SEMAPHORES || CH_USE_QUEUES ||                                   \
    (CH_USE_CONDVARS && CH_USE_CONDVARS_TIMEOUT)
#if CH_USE_SEMAPHORES
  case THD_STATE_WTSEM:
    chSemFastSignalI((Semaphore *)tp->p_u.wtobjp);
 8000270:	6a03      	ldr	r3, [r0, #32]
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	3201      	adds	r2, #1
 8000276:	609a      	str	r2, [r3, #8]
dequeue():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:75
  return tp;
}

static INLINE Thread *dequeue(Thread *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000278:	e890 000c 	ldmia.w	r0, {r2, r3}
 800027c:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:76
  tp->p_next->p_prev = tp->p_prev;
 800027e:	6802      	ldr	r2, [r0, #0]
 8000280:	6053      	str	r3, [r2, #4]
wakeup():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:163
#endif
    /* States requiring dequeuing.*/
    dequeue(tp);
#endif
  }
  tp->p_u.rdymsg = RDY_TIMEOUT;
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
 8000286:	6203      	str	r3, [r0, #32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:164
  chSchReadyI(tp);
 8000288:	f7ff ffca 	bl	8000220 <chSchReadyI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:165
  chSysUnlockFromIsr();
 800028c:	2300      	movs	r3, #0
 800028e:	f383 8811 	msr	BASEPRI, r3
 8000292:	bd08      	pop	{r3, pc}
	...

080002a0 <chSchGoSleepS>:
chSchGoSleepS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:120
void chSchGoSleepS(tstate_t newstate) {
  Thread *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <chSchGoSleepS+0x1c>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:124
#if CH_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_TIME_QUANTUM;
 80002a2:	2214      	movs	r2, #20
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:120
void chSchGoSleepS(tstate_t newstate) {
  Thread *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 80002a4:	6999      	ldr	r1, [r3, #24]
 80002a6:	7708      	strb	r0, [r1, #28]
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:60
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  Thread *tp = tqp->p_next;
 80002a8:	6818      	ldr	r0, [r3, #0]
chSchGoSleepS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:124
#if CH_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_TIME_QUANTUM;
 80002aa:	778a      	strb	r2, [r1, #30]
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:62

  (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
 80002ac:	6802      	ldr	r2, [r0, #0]
 80002ae:	6053      	str	r3, [r2, #4]
 80002b0:	601a      	str	r2, [r3, #0]
chSchGoSleepS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:126
#endif
  setcurrp(fifo_remove(&rlist.r_queue));
 80002b2:	6198      	str	r0, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:127
  currp->p_state = THD_STATE_CURRENT;
 80002b4:	2301      	movs	r3, #1
 80002b6:	7703      	strb	r3, [r0, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:128
  chSysSwitch(currp, otp);
 80002b8:	f000 ba5a 	b.w	8000770 <_port_switch>
 80002bc:	20000f40 	.word	0x20000f40

080002c0 <chSchGoSleepTimeoutS>:
chSchGoSleepTimeoutS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:189
 * @return              The wakeup message.
 * @retval RDY_TIMEOUT if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80002c0:	b530      	push	{r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:193

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80002c2:	1c4b      	adds	r3, r1, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:189
 * @return              The wakeup message.
 * @retval RDY_TIMEOUT if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80002c4:	b087      	sub	sp, #28
 80002c6:	4605      	mov	r5, r0
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <chSchGoSleepTimeoutS+0x34>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:193

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80002ca:	d00d      	beq.n	80002e8 <chSchGoSleepTimeoutS+0x28>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:196
    VirtualTimer vt;

    chVTSetI(&vt, time, wakeup, currp);
 80002cc:	69a3      	ldr	r3, [r4, #24]
 80002ce:	a801      	add	r0, sp, #4
 80002d0:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <chSchGoSleepTimeoutS+0x38>)
 80002d2:	f000 f985 	bl	80005e0 <chVTSetI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:197
    chSchGoSleepS(newstate);
 80002d6:	4628      	mov	r0, r5
 80002d8:	f7ff ffe2 	bl	80002a0 <chSchGoSleepS>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:198
    if (chVTIsArmedI(&vt))
 80002dc:	9b04      	ldr	r3, [sp, #16]
 80002de:	b12b      	cbz	r3, 80002ec <chSchGoSleepTimeoutS+0x2c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:199
      chVTResetI(&vt);
 80002e0:	a801      	add	r0, sp, #4
 80002e2:	f000 f9a5 	bl	8000630 <chVTResetI>
 80002e6:	e001      	b.n	80002ec <chSchGoSleepTimeoutS+0x2c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:202
  }
  else
    chSchGoSleepS(newstate);
 80002e8:	f7ff ffda 	bl	80002a0 <chSchGoSleepS>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:203
  return currp->p_u.rdymsg;
 80002ec:	69a3      	ldr	r3, [r4, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:204
}
 80002ee:	6a18      	ldr	r0, [r3, #32]
 80002f0:	b007      	add	sp, #28
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	20000f40 	.word	0x20000f40
 80002f8:	08000261 	.word	0x08000261
$d():
 80002fc:	00000000 	.word	0x00000000

08000300 <chSchWakeupS>:
chSchWakeupS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:225
 * @param[in] msg       message to the awakened thread
 *
 * @sclass
 */
#if !defined(PORT_OPTIMIZED_WAKEUPS) || defined(__DOXYGEN__)
void chSchWakeupS(Thread *ntp, msg_t msg) {
 8000300:	b538      	push	{r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:234
  ntp->p_u.rdymsg = msg;
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
 8000302:	4d0c      	ldr	r5, [pc, #48]	; (8000334 <chSchWakeupS+0x34>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:229
#if !defined(PORT_OPTIMIZED_WAKEUPS) || defined(__DOXYGEN__)
void chSchWakeupS(Thread *ntp, msg_t msg) {

  chDbgCheckClassS();

  ntp->p_u.rdymsg = msg;
 8000304:	6201      	str	r1, [r0, #32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:234
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
 8000306:	69ab      	ldr	r3, [r5, #24]
 8000308:	6881      	ldr	r1, [r0, #8]
 800030a:	689a      	ldr	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:225
 * @param[in] msg       message to the awakened thread
 *
 * @sclass
 */
#if !defined(PORT_OPTIMIZED_WAKEUPS) || defined(__DOXYGEN__)
void chSchWakeupS(Thread *ntp, msg_t msg) {
 800030c:	4604      	mov	r4, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:234
  ntp->p_u.rdymsg = msg;
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
 800030e:	4291      	cmp	r1, r2
 8000310:	d803      	bhi.n	800031a <chSchWakeupS+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:242
    Thread *otp = chSchReadyI(currp);
    setcurrp(ntp);
    ntp->p_state = THD_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:235
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
    chSchReadyI(ntp);
 8000316:	f7ff bf83 	b.w	8000220 <chSchReadyI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:237
  else {
    Thread *otp = chSchReadyI(currp);
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff80 	bl	8000220 <chSchReadyI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:239
    setcurrp(ntp);
    ntp->p_state = THD_STATE_CURRENT;
 8000320:	2301      	movs	r3, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:237
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio)
    chSchReadyI(ntp);
  else {
    Thread *otp = chSchReadyI(currp);
 8000322:	4601      	mov	r1, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:238
    setcurrp(ntp);
 8000324:	61ac      	str	r4, [r5, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:239
    ntp->p_state = THD_STATE_CURRENT;
 8000326:	7723      	strb	r3, [r4, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:240
    chSysSwitch(ntp, otp);
 8000328:	4620      	mov	r0, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:242
  }
}
 800032a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:240
    chSchReadyI(ntp);
  else {
    Thread *otp = chSchReadyI(currp);
    setcurrp(ntp);
    ntp->p_state = THD_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800032e:	f000 ba1f 	b.w	8000770 <_port_switch>
 8000332:	bf00      	nop
 8000334:	20000f40 	.word	0x20000f40
	...

08000340 <chSchDoRescheduleBehind>:
chSchDoRescheduleBehind():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:304
 *          itself or from within the port layer.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULEBEHIND) || defined(__DOXYGEN__)
void chSchDoRescheduleBehind(void) {
 8000340:	b538      	push	{r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:307
  Thread *otp;

  otp = currp;
 8000342:	4c0a      	ldr	r4, [pc, #40]	; (800036c <chSchDoRescheduleBehind+0x2c>)
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:60
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  Thread *tp = tqp->p_next;
 8000344:	6823      	ldr	r3, [r4, #0]
chSchDoRescheduleBehind():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:307
 8000346:	69a5      	ldr	r5, [r4, #24]
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:62

  (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
 8000348:	681a      	ldr	r2, [r3, #0]
chSchDoRescheduleBehind():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:314
  setcurrp(fifo_remove(&rlist.r_queue));
  currp->p_state = THD_STATE_CURRENT;
#if CH_TIME_QUANTUM > 0
  otp->p_preempt = CH_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
 800034a:	4628      	mov	r0, r5
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:62
 800034c:	6054      	str	r4, [r2, #4]
 800034e:	6022      	str	r2, [r4, #0]
chSchDoRescheduleBehind():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:310
  Thread *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
  currp->p_state = THD_STATE_CURRENT;
 8000350:	2201      	movs	r2, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:309
void chSchDoRescheduleBehind(void) {
  Thread *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
 8000352:	61a3      	str	r3, [r4, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:310
  currp->p_state = THD_STATE_CURRENT;
 8000354:	771a      	strb	r2, [r3, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:312
#if CH_TIME_QUANTUM > 0
  otp->p_preempt = CH_TIME_QUANTUM;
 8000356:	2314      	movs	r3, #20
 8000358:	77ab      	strb	r3, [r5, #30]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:314
#endif
  chSchReadyI(otp);
 800035a:	f7ff ff61 	bl	8000220 <chSchReadyI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:315
  chSysSwitch(currp, otp);
 800035e:	69a0      	ldr	r0, [r4, #24]
 8000360:	4629      	mov	r1, r5
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:316
}
 8000362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:315
  currp->p_state = THD_STATE_CURRENT;
#if CH_TIME_QUANTUM > 0
  otp->p_preempt = CH_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000366:	f000 ba03 	b.w	8000770 <_port_switch>
 800036a:	bf00      	nop
 800036c:	20000f40 	.word	0x20000f40

08000370 <chSchDoRescheduleAhead>:
chSchDoRescheduleAhead():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:332
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULEAHEAD) || defined(__DOXYGEN__)
void chSchDoRescheduleAhead(void) {
  Thread *otp, *cp;

  otp = currp;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <chSchDoRescheduleAhead+0x34>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:329
 *          itself or from within the port layer.
 *
 * @special
 */
#if !defined(PORT_OPTIMIZED_DORESCHEDULEAHEAD) || defined(__DOXYGEN__)
void chSchDoRescheduleAhead(void) {
 8000372:	b510      	push	{r4, lr}
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:60
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static INLINE Thread *fifo_remove(ThreadsQueue *tqp) {
  Thread *tp = tqp->p_next;
 8000374:	6818      	ldr	r0, [r3, #0]
chSchDoRescheduleAhead():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:332
  Thread *otp, *cp;

  otp = currp;
 8000376:	6999      	ldr	r1, [r3, #24]
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:62

  (tqp->p_next = tp->p_next)->p_prev = (Thread *)tqp;
 8000378:	6802      	ldr	r2, [r0, #0]
chSchDoRescheduleAhead():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:341

  otp->p_state = THD_STATE_READY;
  cp = (Thread *)&rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800037a:	688c      	ldr	r4, [r1, #8]
fifo_remove():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/include/chinline.h:62
 800037c:	6053      	str	r3, [r2, #4]
 800037e:	601a      	str	r2, [r3, #0]
chSchDoRescheduleAhead():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:335
  Thread *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
  currp->p_state = THD_STATE_CURRENT;
 8000380:	2201      	movs	r2, #1
 8000382:	7702      	strb	r2, [r0, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:337

  otp->p_state = THD_STATE_READY;
 8000384:	2200      	movs	r2, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:334
void chSchDoRescheduleAhead(void) {
  Thread *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(fifo_remove(&rlist.r_queue));
 8000386:	6198      	str	r0, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:337
  currp->p_state = THD_STATE_CURRENT;

  otp->p_state = THD_STATE_READY;
 8000388:	770a      	strb	r2, [r1, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:340 (discriminator 1)
  cp = (Thread *)&rlist.r_queue;
  do {
    cp = cp->p_next;
 800038a:	681b      	ldr	r3, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:341 (discriminator 1)
  } while (cp->p_prio > otp->p_prio);
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	42a2      	cmp	r2, r4
 8000390:	d8fb      	bhi.n	800038a <chSchDoRescheduleAhead+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:344
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000392:	685a      	ldr	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:343
  cp = (Thread *)&rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000394:	600b      	str	r3, [r1, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:344
  otp->p_prev = cp->p_prev;
 8000396:	604a      	str	r2, [r1, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:348
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
}
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:345
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;
 800039c:	6059      	str	r1, [r3, #4]
 800039e:	6011      	str	r1, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:347

  chSysSwitch(currp, otp);
 80003a0:	f000 b9e6 	b.w	8000770 <_port_switch>
 80003a4:	20000f40 	.word	0x20000f40
	...

080003b0 <chSchDoReschedule>:
chSchDoReschedule():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:367
void chSchDoReschedule(void) {

#if CH_TIME_QUANTUM > 0
  /* If CH_TIME_QUANTUM is enabled then there are two different scenarios to
     handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == 0) {
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <chSchDoReschedule+0x10>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	7f9b      	ldrb	r3, [r3, #30]
 80003b6:	b90b      	cbnz	r3, 80003bc <chSchDoReschedule+0xc>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:370
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 80003b8:	f7ff bfc2 	b.w	8000340 <chSchDoRescheduleBehind>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chschd.c:375
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 80003bc:	f7ff bfd8 	b.w	8000370 <chSchDoRescheduleAhead>
 80003c0:	20000f40 	.word	0x20000f40
	...

080003d0 <_idle_thread>:
_idle_thread():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:64
 * @param[in] p the thread parameter, unused in this scenario
 */
void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <_idle_thread+0xc>)
 80003d2:	4a03      	ldr	r2, [pc, #12]	; (80003e0 <_idle_thread+0x10>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	619a      	str	r2, [r3, #24]
 80003d8:	e7fe      	b.n	80003d8 <_idle_thread+0x8>
 80003da:	bf00      	nop
 80003dc:	20000f40 	.word	0x20000f40
 80003e0:	080012e0 	.word	0x080012e0
	...

080003f0 <chSysInit>:
chSysInit():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:84
 * @note    This function has special, architecture-dependent, requirements,
 *          see the notes into the various port reference manuals.
 *
 * @special
 */
void chSysInit(void) {
 80003f0:	b507      	push	{r0, r1, r2, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:90
  static Thread mainthread;
#if CH_DBG_ENABLE_STACK_CHECK
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
 80003f2:	f000 f955 	bl	80006a0 <_port_init>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:91
  _scheduler_init();
 80003f6:	f7ff ff03 	bl	8000200 <_scheduler_init>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:92
  _vt_init();
 80003fa:	f000 f8e1 	bl	80005c0 <_vt_init>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:104
#if CH_DBG_ENABLE_TRACE
  _trace_init();
#endif

  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&mainthread, NORMALPRIO));
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <chSysInit+0x44>)
 8000402:	f000 f84d 	bl	80004a0 <_thread_init>
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <chSysInit+0x48>)
 8000408:	6198      	str	r0, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:105
  currp->p_state = THD_STATE_CURRENT;
 800040a:	2301      	movs	r3, #1
 800040c:	7703      	strb	r3, [r0, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:111
#if CH_DBG_ENABLE_STACK_CHECK
  /* This is a special case because the main thread Thread structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
#endif
  chSysEnable();
 800040e:	2300      	movs	r3, #0
 8000410:	f383 8811 	msr	BASEPRI, r3
 8000414:	b662      	cpsie	i
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:115

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <chSysInit+0x48>)
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <chSysInit+0x4c>)
 800041a:	699b      	ldr	r3, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:121

#if !CH_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(_idle_thread_wa, sizeof(_idle_thread_wa), IDLEPRIO,
 800041c:	21a0      	movs	r1, #160	; 0xa0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:115
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 800041e:	619a      	str	r2, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:121

#if !CH_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(_idle_thread_wa, sizeof(_idle_thread_wa), IDLEPRIO,
 8000420:	2300      	movs	r3, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2201      	movs	r2, #1
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <chSysInit+0x50>)
 8000428:	4806      	ldr	r0, [pc, #24]	; (8000444 <chSysInit+0x54>)
 800042a:	f000 f879 	bl	8000520 <chThdCreateStatic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:124
                    (tfunc_t)_idle_thread, NULL);
#endif
}
 800042e:	b003      	add	sp, #12
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	20000800 	.word	0x20000800
 8000438:	20000f40 	.word	0x20000f40
 800043c:	080012a0 	.word	0x080012a0
 8000440:	080003d1 	.word	0x080003d1
 8000444:	20000f60 	.word	0x20000f60
	...

08000450 <chSysTimerHandlerI>:
chSysTimerHandlerI():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:137
 *          and, together with the @p CH_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000450:	b538      	push	{r3, r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:143

  chDbgCheckClassI();

#if CH_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > 0)
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <chSysTimerHandlerI+0x48>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	7f9a      	ldrb	r2, [r3, #30]
 8000458:	b10a      	cbz	r2, 800045e <chSysTimerHandlerI+0xe>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:145
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800045a:	3a01      	subs	r2, #1
 800045c:	779a      	strb	r2, [r3, #30]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:150
#endif
#if CH_DBG_THREADS_PROFILING
  currp->p_time++;
#endif
  chVTDoTickI();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <chSysTimerHandlerI+0x4c>)
 8000460:	68da      	ldr	r2, [r3, #12]
 8000462:	461c      	mov	r4, r3
 8000464:	3201      	adds	r2, #1
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d013      	beq.n	8000496 <chSysTimerHandlerI+0x46>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:150 (discriminator 1)
 800046e:	6891      	ldr	r1, [r2, #8]
 8000470:	3901      	subs	r1, #1
 8000472:	6091      	str	r1, [r2, #8]
 8000474:	6822      	ldr	r2, [r4, #0]
 8000476:	4909      	ldr	r1, [pc, #36]	; (800049c <chSysTimerHandlerI+0x4c>)
 8000478:	6893      	ldr	r3, [r2, #8]
 800047a:	b963      	cbnz	r3, 8000496 <chSysTimerHandlerI+0x46>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chsys.c:150 (discriminator 2)
 800047c:	6810      	ldr	r0, [r2, #0]
 800047e:	68d5      	ldr	r5, [r2, #12]
 8000480:	6008      	str	r0, [r1, #0]
 8000482:	60d3      	str	r3, [r2, #12]
 8000484:	6041      	str	r1, [r0, #4]
 8000486:	f383 8811 	msr	BASEPRI, r3
 800048a:	6910      	ldr	r0, [r2, #16]
 800048c:	47a8      	blx	r5
 800048e:	2320      	movs	r3, #32
 8000490:	f383 8811 	msr	BASEPRI, r3
 8000494:	e7ee      	b.n	8000474 <chSysTimerHandlerI+0x24>
 8000496:	bd38      	pop	{r3, r4, r5, pc}
 8000498:	20000f40 	.word	0x20000f40
 800049c:	20001000 	.word	0x20001000

080004a0 <_thread_init>:
_thread_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:79
 * @notapi
 */
Thread *_thread_init(Thread *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = THD_STATE_SUSPENDED;
 80004a0:	2202      	movs	r2, #2
 80004a2:	7702      	strb	r2, [r0, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:80
  tp->p_flags = THD_MEM_MODE_STATIC;
 80004a4:	2200      	movs	r2, #0
 80004a6:	7742      	strb	r2, [r0, #29]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:89
#if CH_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
#endif
#if CH_USE_EVENTS
  tp->p_epending = 0;
 80004a8:	6242      	str	r2, [r0, #36]	; 0x24
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:98
#endif
#if CH_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_USE_REGISTRY
  tp->p_name = NULL;
 80004aa:	6182      	str	r2, [r0, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:99
  REG_INSERT(tp);
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <_thread_init+0x20>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:78
 *
 * @notapi
 */
Thread *_thread_init(Thread *tp, tprio_t prio) {

  tp->p_prio = prio;
 80004ae:	6081      	str	r1, [r0, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:82
  tp->p_state = THD_STATE_SUSPENDED;
  tp->p_flags = THD_MEM_MODE_STATIC;
#if CH_TIME_QUANTUM > 0
  tp->p_preempt = CH_TIME_QUANTUM;
 80004b0:	2114      	movs	r1, #20
 80004b2:	7781      	strb	r1, [r0, #30]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:99
#if CH_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80004b4:	6951      	ldr	r1, [r2, #20]
 80004b6:	6102      	str	r2, [r0, #16]
 80004b8:	6141      	str	r1, [r0, #20]
 80004ba:	6150      	str	r0, [r2, #20]
 80004bc:	6108      	str	r0, [r1, #16]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:114
#endif
#if defined(THREAD_EXT_INIT_HOOK)
  THREAD_EXT_INIT_HOOK(tp);
#endif
  return tp;
}
 80004be:	4770      	bx	lr
 80004c0:	20000f40 	.word	0x20000f40
	...

080004d0 <chThdCreateI>:
chThdCreateI():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:158
 *                      the thread into the working space area.
 *
 * @iclass
 */
Thread *chThdCreateI(void *wsp, size_t size,
                     tprio_t prio, tfunc_t pf, void *arg) {
 80004d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80004d8:	460d      	mov	r5, r1
 80004da:	4616      	mov	r6, r2
 80004dc:	461f      	mov	r7, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:164
  /* Thread structure is laid out in the lower part of the thread workspace.*/
  Thread *tp = wsp;

  chDbgCheckClassI();

  chDbgCheck((wsp != NULL) && (size >= THD_WA_SIZE(0)) &&
 80004de:	4604      	mov	r4, r0
 80004e0:	b120      	cbz	r0, 80004ec <chThdCreateI+0x1c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:164 (discriminator 2)
 80004e2:	298f      	cmp	r1, #143	; 0x8f
 80004e4:	d902      	bls.n	80004ec <chThdCreateI+0x1c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:164 (discriminator 1)
 80004e6:	2a7f      	cmp	r2, #127	; 0x7f
 80004e8:	d800      	bhi.n	80004ec <chThdCreateI+0x1c>
 80004ea:	b913      	cbnz	r3, 80004f2 <chThdCreateI+0x22>
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <chThdCreateI+0x40>)
 80004ee:	f000 fd67 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:167
             (prio <= HIGHPRIO) && (pf != NULL),
             "chThdCreateI");
  SETUP_CONTEXT(wsp, size, pf, arg);
 80004f2:	3d24      	subs	r5, #36	; 0x24
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <chThdCreateI+0x44>)
 80004f6:	1960      	adds	r0, r4, r5
 80004f8:	60e0      	str	r0, [r4, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:168
  return _thread_init(tp, prio);
 80004fa:	4631      	mov	r1, r6
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:167
  chDbgCheckClassI();

  chDbgCheck((wsp != NULL) && (size >= THD_WA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL),
             "chThdCreateI");
  SETUP_CONTEXT(wsp, size, pf, arg);
 80004fc:	5167      	str	r7, [r4, r5]
 80004fe:	f8c0 8004 	str.w	r8, [r0, #4]
 8000502:	6203      	str	r3, [r0, #32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:168
  return _thread_init(tp, prio);
 8000504:	4620      	mov	r0, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:169
}
 8000506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:168

  chDbgCheck((wsp != NULL) && (size >= THD_WA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL),
             "chThdCreateI");
  SETUP_CONTEXT(wsp, size, pf, arg);
  return _thread_init(tp, prio);
 800050a:	f7ff bfc9 	b.w	80004a0 <_thread_init>
 800050e:	bf00      	nop
 8000510:	080012f0 	.word	0x080012f0
 8000514:	08000781 	.word	0x08000781
	...

08000520 <chThdCreateStatic>:
chThdCreateStatic():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:188
 *                      the thread into the working space area.
 *
 * @api
 */
Thread *chThdCreateStatic(void *wsp, size_t size,
                          tprio_t prio, tfunc_t pf, void *arg) {
 8000520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000522:	461d      	mov	r5, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:199
                  CH_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(Thread),
                  (uint8_t *)wsp + size,
                  CH_STACK_FILL_VALUE);
#endif
  chSysLock();
 8000524:	2320      	movs	r3, #32
 8000526:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:200
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), RDY_OK);
 800052a:	9c06      	ldr	r4, [sp, #24]
 800052c:	462b      	mov	r3, r5
 800052e:	9400      	str	r4, [sp, #0]
 8000530:	f7ff ffce 	bl	80004d0 <chThdCreateI>
 8000534:	2100      	movs	r1, #0
 8000536:	4604      	mov	r4, r0
 8000538:	f7ff fee2 	bl	8000300 <chSchWakeupS>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:201
  chSysUnlock();
 800053c:	2300      	movs	r3, #0
 800053e:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:203
  return tp;
}
 8000542:	4620      	mov	r0, r4
 8000544:	b003      	add	sp, #12
 8000546:	bd30      	pop	{r4, r5, pc}
	...

08000550 <chThdSleep>:
chThdSleep():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:292
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000550:	b510      	push	{r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:294

  chDbgCheck(time != TIME_IMMEDIATE, "chThdSleep");
 8000552:	4604      	mov	r4, r0
 8000554:	b910      	cbnz	r0, 800055c <chThdSleep+0xc>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:294 (discriminator 1)
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <chThdSleep+0x24>)
 8000558:	f000 fd32 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:296

  chSysLock();
 800055c:	2320      	movs	r3, #32
 800055e:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:297
  chThdSleepS(time);
 8000562:	2006      	movs	r0, #6
 8000564:	4621      	mov	r1, r4
 8000566:	f7ff feab 	bl	80002c0 <chSchGoSleepTimeoutS>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:298
  chSysUnlock();
 800056a:	2300      	movs	r3, #0
 800056c:	f383 8811 	msr	BASEPRI, r3
 8000570:	bd10      	pop	{r4, pc}
 8000572:	bf00      	nop
 8000574:	08001328 	.word	0x08001328
	...

08000580 <chThdExitS>:
chThdExitS():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:366
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000580:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:367
  Thread *tp = currp;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <chThdExitS+0x28>)
 8000584:	699b      	ldr	r3, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:380
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & THD_MEM_MODE_MASK) == THD_MEM_MODE_STATIC)
 8000586:	7f5a      	ldrb	r2, [r3, #29]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:369
 * @sclass
 */
void chThdExitS(msg_t msg) {
  Thread *tp = currp;

  tp->p_u.exitcode = msg;
 8000588:	6218      	str	r0, [r3, #32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:380
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & THD_MEM_MODE_MASK) == THD_MEM_MODE_STATIC)
 800058a:	0792      	lsls	r2, r2, #30
 800058c:	d104      	bne.n	8000598 <chThdExitS+0x18>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:381
    REG_REMOVE(tp);
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	6919      	ldr	r1, [r3, #16]
 8000592:	6111      	str	r1, [r2, #16]
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:383
#endif
  chSchGoSleepS(THD_STATE_FINAL);
 8000598:	200e      	movs	r0, #14
 800059a:	f7ff fe81 	bl	80002a0 <chSchGoSleepS>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:386
  /* The thread never returns here.*/
  chDbgAssert(FALSE, "chThdExitS(), #1", "zombies apocalypse");
}
 800059e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:385
  if ((tp->p_flags & THD_MEM_MODE_MASK) == THD_MEM_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(THD_STATE_FINAL);
  /* The thread never returns here.*/
  chDbgAssert(FALSE, "chThdExitS(), #1", "zombies apocalypse");
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <chThdExitS+0x2c>)
 80005a4:	f000 bd0c 	b.w	8000fc0 <chDbgPanic>
 80005a8:	20000f40 	.word	0x20000f40
 80005ac:	08001337 	.word	0x08001337

080005b0 <chThdExit>:
chThdExit():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:347
 *
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
 80005b0:	2320      	movs	r3, #32
 80005b2:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chthreads.c:348
  chThdExitS(msg);
 80005b6:	f7ff bfe3 	b.w	8000580 <chThdExitS>
 80005ba:	0000      	movs	r0, r0
 80005bc:	0000      	movs	r0, r0
	...

080005c0 <_vt_init>:
_vt_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:52
 *
 * @notapi
 */
void _vt_init(void) {

  vtlist.vt_next = vtlist.vt_prev = (void *)&vtlist;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <_vt_init+0x14>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:53
  vtlist.vt_time = (systime_t)-1;
 80005c2:	f04f 32ff 	mov.w	r2, #4294967295
 80005c6:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:54
  vtlist.vt_systime = 0;
 80005c8:	2200      	movs	r2, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:52
 *
 * @notapi
 */
void _vt_init(void) {

  vtlist.vt_next = vtlist.vt_prev = (void *)&vtlist;
 80005ca:	605b      	str	r3, [r3, #4]
 80005cc:	601b      	str	r3, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:54
  vtlist.vt_time = (systime_t)-1;
  vtlist.vt_systime = 0;
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20001000 	.word	0x20001000
	...

080005e0 <chVTSetI>:
chVTSetI():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:76
 * @param[in] par       a parameter that will be passed to the callback
 *                      function
 *
 * @iclass
 */
void chVTSetI(VirtualTimer *vtp, systime_t time, vtfunc_t vtfunc, void *par) {
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	460d      	mov	r5, r1
 80005e4:	4616      	mov	r6, r2
 80005e6:	461f      	mov	r7, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:80
  VirtualTimer *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (time != TIME_IMMEDIATE),
 80005e8:	4604      	mov	r4, r0
 80005ea:	b108      	cbz	r0, 80005f0 <chVTSetI+0x10>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:80 (discriminator 2)
 80005ec:	b102      	cbz	r2, 80005f0 <chVTSetI+0x10>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:80 (discriminator 1)
 80005ee:	b911      	cbnz	r1, 80005f6 <chVTSetI+0x16>
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <chVTSetI+0x44>)
 80005f2:	f000 fce5 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:85
             "chVTSetI");

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = vtlist.vt_next;
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <chVTSetI+0x48>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:83

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (time != TIME_IMMEDIATE),
             "chVTSetI");

  vtp->vt_par = par;
 80005f8:	6127      	str	r7, [r4, #16]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:85
  vtp->vt_func = vtfunc;
  p = vtlist.vt_next;
 80005fa:	6813      	ldr	r3, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:84
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (time != TIME_IMMEDIATE),
             "chVTSetI");

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80005fc:	60e6      	str	r6, [r4, #12]
 80005fe:	4611      	mov	r1, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:86 (discriminator 1)
  p = vtlist.vt_next;
  while (p->vt_time < time) {
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	42aa      	cmp	r2, r5
 8000604:	d202      	bcs.n	800060c <chVTSetI+0x2c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:87
    time -= p->vt_time;
 8000606:	1aad      	subs	r5, r5, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:88
    p = p->vt_next;
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	e7f9      	b.n	8000600 <chVTSetI+0x20>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:91
  }

  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 800060c:	685a      	ldr	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:94
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_time = time;
  if (p != (void *)&vtlist)
 800060e:	428b      	cmp	r3, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:91
  while (p->vt_time < time) {
    time -= p->vt_time;
    p = p->vt_next;
  }

  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8000610:	6023      	str	r3, [r4, #0]
 8000612:	6062      	str	r2, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:92
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8000614:	605c      	str	r4, [r3, #4]
 8000616:	6014      	str	r4, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:93
  vtp->vt_time = time;
 8000618:	60a5      	str	r5, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:94
  if (p != (void *)&vtlist)
 800061a:	d002      	beq.n	8000622 <chVTSetI+0x42>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:95
    p->vt_time -= time;
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	1b55      	subs	r5, r2, r5
 8000620:	609d      	str	r5, [r3, #8]
 8000622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000624:	08001350 	.word	0x08001350
 8000628:	20001000 	.word	0x20001000
$d():
 800062c:	00000000 	.word	0x00000000

08000630 <chVTResetI>:
chVTResetI():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:106
 *
 * @param[in] vtp       the @p VirtualTimer structure pointer
 *
 * @iclass
 */
void chVTResetI(VirtualTimer *vtp) {
 8000630:	b510      	push	{r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:109

  chDbgCheckClassI();
  chDbgCheck(vtp != NULL, "chVTResetI");
 8000632:	4604      	mov	r4, r0
 8000634:	b910      	cbnz	r0, 800063c <chVTResetI+0xc>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:109 (discriminator 1)
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <chVTResetI+0x34>)
 8000638:	f000 fcc2 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:110
  chDbgAssert(vtp->vt_func != NULL,
 800063c:	68e3      	ldr	r3, [r4, #12]
 800063e:	b913      	cbnz	r3, 8000646 <chVTResetI+0x16>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:110 (discriminator 1)
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <chVTResetI+0x38>)
 8000642:	f000 fcbd 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:114
              "chVTResetI(), #1",
              "timer not set or already triggered");

  if (vtp->vt_next != (void *)&vtlist)
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <chVTResetI+0x3c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d003      	beq.n	8000656 <chVTResetI+0x26>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:115
    vtp->vt_next->vt_time += vtp->vt_time;
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	68a2      	ldr	r2, [r4, #8]
 8000652:	440a      	add	r2, r1
 8000654:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:116
  vtp->vt_prev->vt_next = vtp->vt_next;
 8000656:	6862      	ldr	r2, [r4, #4]
 8000658:	6013      	str	r3, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:117
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/kernel/src/chvt.c:118
  vtp->vt_func = (vtfunc_t)NULL;
 800065e:	2300      	movs	r3, #0
 8000660:	60e3      	str	r3, [r4, #12]
 8000662:	bd10      	pop	{r4, pc}
 8000664:	0800135d 	.word	0x0800135d
 8000668:	0800136c 	.word	0x0800136c
 800066c:	20001000 	.word	0x20001000

08000670 <_port_switch_from_isr>:
_port_switch_from_isr():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:210
__attribute__((naked))
#endif
void _port_switch_from_isr(void) {

  dbg_check_lock();
  chSchDoReschedule();
 8000670:	f7ff fe9e 	bl	80003b0 <chSchDoReschedule>

08000674 <_port_exit_from_isr>:
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:214
  dbg_check_unlock();
  asm volatile ("_port_exit_from_isr:" : : : "memory");
#if !CORTEX_SIMPLIFIED_PRIORITY || defined(__DOXYGEN__)
  asm volatile ("svc     #0");
 8000674:	df00      	svc	0
	...

08000680 <SVCallVector>:
SVCallVector():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:69
 */
void SVCallVector(void) {
  struct extctx *ctxp;

  /* Current PSP value.*/
  asm volatile ("mrs     %0, PSP" : "=r" (ctxp) : : "memory");
 8000680:	f3ef 8309 	mrs	r3, PSP
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:73

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000684:	3320      	adds	r3, #32
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:80
#if CORTEX_USE_FPU
  /* Restoring the special register SCB_FPCCR.*/
  SCB_FPCCR = (uint32_t)ctxp->fpccr;
  SCB_FPCAR = SCB_FPCAR + sizeof (struct extctx);
#endif
  asm volatile ("msr     PSP, %0" : : "r" (ctxp) : "memory");
 8000686:	f383 8809 	msr	PSP, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:81
  port_unlock_from_isr();
 800068a:	2300      	movs	r3, #0
 800068c:	f383 8811 	msr	BASEPRI, r3
 8000690:	4770      	bx	lr
	...

080006a0 <_port_init>:
_port_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:118
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
void _port_init(void) {
 80006a0:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:121

  /* Initialization of the vector table and priority related settings.*/
  SCB_VTOR = CORTEX_VTOR_INIT;
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <_port_init+0x2c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:122
  SCB_AIRCR = AIRCR_VECTKEY | AIRCR_PRIGROUP(CORTEX_PRIGROUP_INIT);
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <_port_init+0x30>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:125

  /* Initialization of the system vectors used by the port.*/
  nvicSetSystemHandlerPriority(HANDLER_SVCALL,
 80006aa:	2007      	movs	r0, #7
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:122
 */
void _port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB_VTOR = CORTEX_VTOR_INIT;
  SCB_AIRCR = AIRCR_VECTKEY | AIRCR_PRIGROUP(CORTEX_PRIGROUP_INIT);
 80006ac:	60da      	str	r2, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:125

  /* Initialization of the system vectors used by the port.*/
  nvicSetSystemHandlerPriority(HANDLER_SVCALL,
 80006ae:	2110      	movs	r1, #16
 80006b0:	f000 f94e 	bl	8000950 <nvicSetSystemHandlerPriority>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:127
    CORTEX_PRIORITY_MASK(CORTEX_PRIORITY_SVCALL));
  nvicSetSystemHandlerPriority(HANDLER_PENDSV,
 80006b4:	200a      	movs	r0, #10
 80006b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ba:	f000 f949 	bl	8000950 <nvicSetSystemHandlerPriority>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:131
    CORTEX_PRIORITY_MASK(CORTEX_PRIORITY_PENDSV));
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK,
    CORTEX_PRIORITY_MASK(CORTEX_PRIORITY_SYSTICK));
}
 80006be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:129
  /* Initialization of the system vectors used by the port.*/
  nvicSetSystemHandlerPriority(HANDLER_SVCALL,
    CORTEX_PRIORITY_MASK(CORTEX_PRIORITY_SVCALL));
  nvicSetSystemHandlerPriority(HANDLER_PENDSV,
    CORTEX_PRIORITY_MASK(CORTEX_PRIORITY_PENDSV));
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK,
 80006c2:	200b      	movs	r0, #11
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	f000 b943 	b.w	8000950 <nvicSetSystemHandlerPriority>
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	05fa0300 	.word	0x05fa0300
	...

080006e0 <_port_irq_epilogue>:
_port_irq_epilogue():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:150
/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
 80006e0:	2320      	movs	r3, #32
 80006e2:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:151
  if ((SCB_ICSR & ICSR_RETTOBASE) != 0) {
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <_port_irq_epilogue+0x58>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80006ee:	d020      	beq.n	8000732 <_port_irq_epilogue+0x52>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:155
    struct extctx *ctxp;

    /* Current PSP value.*/
    asm volatile ("mrs     %0, PSP" : "=r" (ctxp) : : "memory");
 80006f0:	f3ef 8309 	mrs	r3, PSP
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:159

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80006f4:	f1a3 0220 	sub.w	r2, r3, #32
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:160
    asm volatile ("msr     PSP, %0" : : "r" (ctxp) : "memory");
 80006f8:	f382 8809 	msr	PSP, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:161
    ctxp->xpsr = (regarm_t)0x01000000;
 80006fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000700:	f843 2c04 	str.w	r2, [r3, #-4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:165

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <_port_irq_epilogue+0x5c>)
 8000706:	6991      	ldr	r1, [r2, #24]
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	7f88      	ldrb	r0, [r1, #30]
 800070c:	6892      	ldr	r2, [r2, #8]
 800070e:	6889      	ldr	r1, [r1, #8]
 8000710:	b120      	cbz	r0, 800071c <_port_irq_epilogue+0x3c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:165 (discriminator 1)
 8000712:	428a      	cmp	r2, r1
 8000714:	bf94      	ite	ls
 8000716:	2200      	movls	r2, #0
 8000718:	2201      	movhi	r2, #1
 800071a:	e003      	b.n	8000724 <_port_irq_epilogue+0x44>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:165 (discriminator 2)
 800071c:	428a      	cmp	r2, r1
 800071e:	bf34      	ite	cc
 8000720:	2200      	movcc	r2, #0
 8000722:	2201      	movcs	r2, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:165 (discriminator 3)
 8000724:	b10a      	cbz	r2, 800072a <_port_irq_epilogue+0x4a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:167
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (void *)_port_switch_from_isr;
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <_port_irq_epilogue+0x60>)
 8000728:	e000      	b.n	800072c <_port_irq_epilogue+0x4c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:176
#endif
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (void *)_port_exit_from_isr;
 800072a:	4a06      	ldr	r2, [pc, #24]	; (8000744 <_port_irq_epilogue+0x64>)
 800072c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000730:	4770      	bx	lr
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:197

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	20000f40 	.word	0x20000f40
 8000740:	08000671 	.word	0x08000671
 8000744:	08000674 	.word	0x08000674
	...

08000750 <SysTickVector>:
SysTickVector():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:47
/**
 * @brief   System Timer vector.
 * @details This interrupt is used as system tick.
 * @note    The timer must be initialized in the startup code.
 */
CH_IRQ_HANDLER(SysTickVector) {
 8000750:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:51

  CH_IRQ_PROLOGUE();

  chSysLockFromIsr();
 8000752:	2320      	movs	r3, #32
 8000754:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:52
  chSysTimerHandlerI();
 8000758:	f7ff fe7a 	bl	8000450 <chSysTimerHandlerI>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:53
  chSysUnlockFromIsr();
 800075c:	2300      	movs	r3, #0
 800075e:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:56

  CH_IRQ_EPILOGUE();
}
 8000762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:55

  chSysLockFromIsr();
  chSysTimerHandlerI();
  chSysUnlockFromIsr();

  CH_IRQ_EPILOGUE();
 8000766:	f7ff bfbb 	b.w	80006e0 <_port_irq_epilogue>
 800076a:	0000      	movs	r0, r0
 800076c:	0000      	movs	r0, r0
	...

08000770 <_port_switch>:
_port_switch():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:238
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void _port_switch(Thread *ntp, Thread *otp) {

  asm volatile ("push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}"
 8000770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:244
                : : : "memory");
#if CORTEX_USE_FPU
  asm volatile ("vpush   {s16-s31}" : : : "memory");
#endif

  asm volatile ("str     sp, [%1, #12]                          \n\t"
 8000774:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000778:	f8d0 d00c 	ldr.w	sp, [r0, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:250
                "ldr     sp, [%0, #12]" : : "r" (ntp), "r" (otp));

#if CORTEX_USE_FPU
  asm volatile ("vpop    {s16-s31}" : : : "memory");
#endif
  asm volatile ("pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}"
 800077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000780 <_port_thread_start>:
_port_thread_start():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:261
 * @details If the work function returns @p chThdExit() is automatically
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
 8000780:	2300      	movs	r3, #0
 8000782:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/chcore_v7m.c:262
  asm volatile ("mov     r0, r5                                 \n\t"
 8000786:	4628      	mov	r0, r5
 8000788:	47a0      	blx	r4
 800078a:	f7ff ff11 	bl	80005b0 <chThdExit>
 800078e:	4770      	bx	lr

08000790 <__early_init>:
__early_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:234
 * @note    This function is a weak symbol.
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
void __early_init(void) {}
 8000790:	4770      	bx	lr
	...

080007a0 <__late_init>:
__late_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:246
 * @note    This function is a weak symbol.
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
void __late_init(void) {}
 80007a0:	4770      	bx	lr
	...

080007b0 <_default_exit>:
_default_exit():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:257
 * @note    This function is a weak symbol.
 */
#if !defined(__DOXYGEN__)
__attribute__((weak, naked))
#endif
void _default_exit(void) {
 80007b0:	e7fe      	b.n	80007b0 <_default_exit>
	...

080007c0 <ResetHandler>:
ResetHandler():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:274
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 80007c0:	b672      	cpsid	i
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:276
  psp = SYMVAL(__process_stack_end__);
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <ResetHandler+0x8c>)
 80007c4:	f383 8809 	msr	PSP, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:296
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 80007c8:	2302      	movs	r3, #2
 80007ca:	f383 8814 	msr	CONTROL, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:297
  asm volatile ("isb");
 80007ce:	f3bf 8f6f 	isb	sy
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:301

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <ResetHandler+0x90>)
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <ResetHandler+0x8c>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:301 (discriminator 1)
 80007d6:	491f      	ldr	r1, [pc, #124]	; (8000854 <ResetHandler+0x94>)
 80007d8:	428b      	cmp	r3, r1
 80007da:	d204      	bcs.n	80007e6 <ResetHandler+0x26>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:301 (discriminator 2)
 80007dc:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80007e0:	f843 1b04 	str.w	r1, [r3], #4
 80007e4:	e7f7      	b.n	80007d6 <ResetHandler+0x16>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:301
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <ResetHandler+0x98>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:304 (discriminator 1)
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d204      	bcs.n	80007f6 <ResetHandler+0x36>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:304 (discriminator 2)
 80007ec:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80007f0:	f843 1b04 	str.w	r1, [r3], #4
 80007f4:	e7f8      	b.n	80007e8 <ResetHandler+0x28>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:310
         &__process_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
#endif

  /* Early initialization hook invocation.*/
  __early_init();
 80007f6:	f7ff ffcb 	bl	8000790 <__early_init>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:319
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80007fa:	2300      	movs	r3, #0
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <ResetHandler+0x9c>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:319 (discriminator 1)
 80007fe:	4918      	ldr	r1, [pc, #96]	; (8000860 <ResetHandler+0xa0>)
 8000800:	1898      	adds	r0, r3, r2
 8000802:	4288      	cmp	r0, r1
 8000804:	d204      	bcs.n	8000810 <ResetHandler+0x50>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:320
      *dp++ = *tp++;
 8000806:	4917      	ldr	r1, [pc, #92]	; (8000864 <ResetHandler+0xa4>)
 8000808:	5859      	ldr	r1, [r3, r1]
 800080a:	5099      	str	r1, [r3, r2]
 800080c:	3304      	adds	r3, #4
 800080e:	e7f5      	b.n	80007fc <ResetHandler+0x3c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:319
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <ResetHandler+0xa8>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:326 (discriminator 1)
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <ResetHandler+0xac>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d203      	bcs.n	8000820 <ResetHandler+0x60>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:326 (discriminator 2)
 8000818:	2200      	movs	r2, #0
 800081a:	f843 2b04 	str.w	r2, [r3], #4
 800081e:	e7f8      	b.n	8000812 <ResetHandler+0x52>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:330
#endif

  /* Late initialization hook invocation.*/
  __late_init();
 8000820:	f7ff ffbe 	bl	80007a0 <__late_init>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:335

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
 8000824:	4c12      	ldr	r4, [pc, #72]	; (8000870 <ResetHandler+0xb0>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:336 (discriminator 1)
    while (fpp < &__init_array_end) {
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <ResetHandler+0xb4>)
 8000828:	429c      	cmp	r4, r3
 800082a:	d203      	bcs.n	8000834 <ResetHandler+0x74>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:337
      (*fpp)();
 800082c:	f854 3b04 	ldr.w	r3, [r4], #4
 8000830:	4798      	blx	r3
 8000832:	e7f8      	b.n	8000826 <ResetHandler+0x66>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:344
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 8000834:	f7ff fc7c 	bl	8000130 <main>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:349

#if CRT0_CALL_DESTRUCTORS
  /* Destructors invocation.*/
  {
    funcpp_t fpp = &__fini_array_start;
 8000838:	4c0f      	ldr	r4, [pc, #60]	; (8000878 <ResetHandler+0xb8>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:350 (discriminator 1)
    while (fpp < &__fini_array_end) {
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <ResetHandler+0xbc>)
 800083c:	429c      	cmp	r4, r3
 800083e:	d203      	bcs.n	8000848 <ResetHandler+0x88>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:351
      (*fpp)();
 8000840:	f854 3b04 	ldr.w	r3, [r4], #4
 8000844:	4798      	blx	r3
 8000846:	e7f8      	b.n	800083a <ResetHandler+0x7a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/ARMCMx/crt0.c:358
    }
  }
#endif

  /* Invoking the exit handler.*/
  _default_exit();
 8000848:	f7ff ffb2 	bl	80007b0 <_default_exit>
 800084c:	20000800 	.word	0x20000800
 8000850:	20000000 	.word	0x20000000
 8000854:	20000400 	.word	0x20000400
 8000858:	20000400 	.word	0x20000400
 800085c:	20000800 	.word	0x20000800
 8000860:	20000800 	.word	0x20000800
 8000864:	08001498 	.word	0x08001498
 8000868:	20000800 	.word	0x20000800
 800086c:	20001010 	.word	0x20001010
 8000870:	080000f4 	.word	0x080000f4
 8000874:	080000f8 	.word	0x080000f8
 8000878:	080000f8 	.word	0x080000f8
 800087c:	080000f8 	.word	0x080000f8

08000880 <halInit>:
halInit():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal.c:70
 *
 * @init
 */
void halInit(void) {

  hal_lld_init();
 8000880:	f000 b806 	b.w	8000890 <hal_lld_init>
	...

08000890 <hal_lld_init>:
hal_lld_init():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:96
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(~RCC_AHBRSTR_FLITFRST);
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <hal_lld_init+0x58>)
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	f462 4200 	orn	r2, r2, #32768	; 0x8000
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:97
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800089e:	6999      	ldr	r1, [r3, #24]
 80008a0:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 80008a4:	6199      	str	r1, [r3, #24]
 80008a6:	619a      	str	r2, [r3, #24]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:98
  rccResetAPB2(~0);
 80008a8:	6959      	ldr	r1, [r3, #20]
 80008aa:	f04f 31ff 	mov.w	r1, #4294967295
 80008ae:	6159      	str	r1, [r3, #20]
 80008b0:	615a      	str	r2, [r3, #20]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:100

  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80008b2:	6a19      	ldr	r1, [r3, #32]
 80008b4:	f041 0101 	orr.w	r1, r1, #1
 80008b8:	6219      	str	r1, [r3, #32]
 80008ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008bc:	f041 0101 	orr.w	r1, r1, #1
 80008c0:	62d9      	str	r1, [r3, #44]	; 0x2c
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:103

  /* SysTick initialization using the system clock.*/
  SysTick->LOAD = Clk.AHBFreqHz / CH_FREQUENCY - 1;
 80008c2:	490a      	ldr	r1, [pc, #40]	; (80008ec <hal_lld_init+0x5c>)
 80008c4:	6808      	ldr	r0, [r1, #0]
 80008c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <hal_lld_init+0x60>)
 80008d0:	3801      	subs	r0, #1
 80008d2:	6048      	str	r0, [r1, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:104
  SysTick->VAL = 0;
 80008d4:	608a      	str	r2, [r1, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:107
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;
 80008d6:	2207      	movs	r2, #7
 80008d8:	600a      	str	r2, [r1, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:114
  /* DWT cycle counter enable.*/
//  SCS_DEMCR |= SCS_DEMCR_TRCENA;
//  DWT_CTRL  |= DWT_CTRL_CYCCNTENA;

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80008da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/hal_lld.cpp:120

  /* Initializes the backup domain.*/
//  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 80008e2:	f000 b8f5 	b.w	8000ad0 <dmaInit>
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	20000864 	.word	0x20000864
 80008f0:	e000e010 	.word	0xe000e010
	...

08000900 <nvicEnableVector>:
nvicEnableVector():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:47
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority mask
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
  unsigned sh = (n & 3) << 3;
 8000900:	f000 0203 	and.w	r2, r0, #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:46
 * @note    The parameters are not tested for correctness.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority mask
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8000904:	b530      	push	{r4, r5, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:47
  unsigned sh = (n & 3) << 3;
 8000906:	00d2      	lsls	r2, r2, #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:49

  NVIC_IPR(n >> 2) = (NVIC_IPR(n >> 2) & ~(0xFF << sh)) | (prio << sh);
 8000908:	24ff      	movs	r4, #255	; 0xff
 800090a:	4094      	lsls	r4, r2
 800090c:	4091      	lsls	r1, r2
 800090e:	f020 0303 	bic.w	r3, r0, #3
 8000912:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000916:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800091a:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:50
  NVIC_ICPR(n >> 5) = 1 << (n & 0x1F);
 800091e:	2201      	movs	r2, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:49
 * @param[in] prio      the interrupt priority mask
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
  unsigned sh = (n & 3) << 3;

  NVIC_IPR(n >> 2) = (NVIC_IPR(n >> 2) & ~(0xFF << sh)) | (prio << sh);
 8000920:	ea25 0404 	bic.w	r4, r5, r4
 8000924:	430c      	orrs	r4, r1
 8000926:	f8c3 4300 	str.w	r4, [r3, #768]	; 0x300
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:50
  NVIC_ICPR(n >> 5) = 1 << (n & 0x1F);
 800092a:	f000 031f 	and.w	r3, r0, #31
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	0940      	lsrs	r0, r0, #5
 8000934:	0080      	lsls	r0, r0, #2
 8000936:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800093a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800093e:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:51
  NVIC_ISER(n >> 5) = 1 << (n & 0x1F);
 8000942:	6003      	str	r3, [r0, #0]
 8000944:	bd30      	pop	{r4, r5, pc}
	...

08000950 <nvicSetSystemHandlerPriority>:
nvicSetSystemHandlerPriority():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:74
 * @note    The parameters are not tested for correctness.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority mask
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 8000950:	f020 0303 	bic.w	r3, r0, #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:75
  unsigned sh = (handler & 3) * 8;
 8000954:	f000 0003 	and.w	r0, r0, #3
 8000958:	00c0      	lsls	r0, r0, #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:78

  SCB_SHPR(handler >> 2) = (SCB_SHPR(handler >> 2) &
                           ~(0xFF << sh)) | (prio << sh);
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	4082      	lsls	r2, r0
 800095e:	4081      	lsls	r1, r0
 8000960:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:74
 * @note    The parameters are not tested for correctness.
 *
 * @param[in] handler   the system handler number
 * @param[in] prio      the system handler priority mask
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
 8000964:	b510      	push	{r4, lr}
 8000966:	f503 436d 	add.w	r3, r3, #60672	; 0xed00
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:77
  unsigned sh = (handler & 3) * 8;

  SCB_SHPR(handler >> 2) = (SCB_SHPR(handler >> 2) &
 800096a:	699c      	ldr	r4, [r3, #24]
 800096c:	ea24 0202 	bic.w	r2, r4, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:78
                           ~(0xFF << sh)) | (prio << sh);
 8000970:	430a      	orrs	r2, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/nvic.c:77
 * @param[in] prio      the system handler priority mask
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {
  unsigned sh = (handler & 3) * 8;

  SCB_SHPR(handler >> 2) = (SCB_SHPR(handler >> 2) &
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	bd10      	pop	{r4, pc}
	...

08000980 <Vector6C>:
Vector6C():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:114
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch1_IRQHandler) {
 8000980:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:119
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <Vector6C+0x20>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:120
  DMA1->IFCR = STM32_DMA_ISR_MASK << 0;
 8000984:	220f      	movs	r2, #15
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:119
CH_IRQ_HANDLER(DMA1_Ch1_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000986:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:120
  DMA1->IFCR = STM32_DMA_ISR_MASK << 0;
 8000988:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:121
  if (dma_isr_redir[0].dma_func)
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <Vector6C+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:119
CH_IRQ_HANDLER(DMA1_Ch1_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800098c:	f001 010f 	and.w	r1, r1, #15
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:121
  DMA1->IFCR = STM32_DMA_ISR_MASK << 0;
  if (dma_isr_redir[0].dma_func)
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	b10b      	cbz	r3, 8000998 <Vector6C+0x18>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:122
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000994:	6850      	ldr	r0, [r2, #4]
 8000996:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:125

  CH_IRQ_EPILOGUE();
}
 8000998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:124
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  CH_IRQ_EPILOGUE();
 800099c:	f7ff bea0 	b.w	80006e0 <_port_irq_epilogue>
 80009a0:	40026000 	.word	0x40026000
 80009a4:	20000828 	.word	0x20000828
	...

080009b0 <Vector70>:
Vector70():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:132
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch2_IRQHandler) {
 80009b0:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:137
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <Vector70+0x20>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:138
  DMA1->IFCR = STM32_DMA_ISR_MASK << 4;
 80009b4:	22f0      	movs	r2, #240	; 0xf0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:137
CH_IRQ_HANDLER(DMA1_Ch2_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 80009b6:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:138
  DMA1->IFCR = STM32_DMA_ISR_MASK << 4;
 80009b8:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:139
  if (dma_isr_redir[1].dma_func)
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <Vector70+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:137
CH_IRQ_HANDLER(DMA1_Ch2_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 80009bc:	f3c1 1103 	ubfx	r1, r1, #4, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:139
  DMA1->IFCR = STM32_DMA_ISR_MASK << 4;
  if (dma_isr_redir[1].dma_func)
 80009c0:	6893      	ldr	r3, [r2, #8]
 80009c2:	b10b      	cbz	r3, 80009c8 <Vector70+0x18>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:140
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80009c4:	68d0      	ldr	r0, [r2, #12]
 80009c6:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:143

  CH_IRQ_EPILOGUE();
}
 80009c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:142
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  CH_IRQ_EPILOGUE();
 80009cc:	f7ff be88 	b.w	80006e0 <_port_irq_epilogue>
 80009d0:	40026000 	.word	0x40026000
 80009d4:	20000828 	.word	0x20000828
	...

080009e0 <Vector74>:
Vector74():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:150
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch3_IRQHandler) {
 80009e0:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:155
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <Vector74+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:156
  DMA1->IFCR = STM32_DMA_ISR_MASK << 8;
 80009e4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:155
CH_IRQ_HANDLER(DMA1_Ch3_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80009e8:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:156
  DMA1->IFCR = STM32_DMA_ISR_MASK << 8;
 80009ea:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:157
  if (dma_isr_redir[2].dma_func)
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <Vector74+0x28>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:155
CH_IRQ_HANDLER(DMA1_Ch3_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80009ee:	f3c1 2103 	ubfx	r1, r1, #8, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:157
  DMA1->IFCR = STM32_DMA_ISR_MASK << 8;
  if (dma_isr_redir[2].dma_func)
 80009f2:	6913      	ldr	r3, [r2, #16]
 80009f4:	b10b      	cbz	r3, 80009fa <Vector74+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:158
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80009f6:	6950      	ldr	r0, [r2, #20]
 80009f8:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:161

  CH_IRQ_EPILOGUE();
}
 80009fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:160
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  CH_IRQ_EPILOGUE();
 80009fe:	f7ff be6f 	b.w	80006e0 <_port_irq_epilogue>
 8000a02:	bf00      	nop
 8000a04:	40026000 	.word	0x40026000
 8000a08:	20000828 	.word	0x20000828
$d():
 8000a0c:	00000000 	.word	0x00000000

08000a10 <Vector78>:
Vector78():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:168
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch4_IRQHandler) {
 8000a10:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:173
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <Vector78+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:174
  DMA1->IFCR = STM32_DMA_ISR_MASK << 12;
 8000a14:	f44f 4270 	mov.w	r2, #61440	; 0xf000
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:173
CH_IRQ_HANDLER(DMA1_Ch4_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000a18:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:174
  DMA1->IFCR = STM32_DMA_ISR_MASK << 12;
 8000a1a:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:175
  if (dma_isr_redir[3].dma_func)
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <Vector78+0x28>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:173
CH_IRQ_HANDLER(DMA1_Ch4_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000a1e:	f3c1 3103 	ubfx	r1, r1, #12, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:175
  DMA1->IFCR = STM32_DMA_ISR_MASK << 12;
  if (dma_isr_redir[3].dma_func)
 8000a22:	6993      	ldr	r3, [r2, #24]
 8000a24:	b10b      	cbz	r3, 8000a2a <Vector78+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:176
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000a26:	69d0      	ldr	r0, [r2, #28]
 8000a28:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:179

  CH_IRQ_EPILOGUE();
}
 8000a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:178
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  CH_IRQ_EPILOGUE();
 8000a2e:	f7ff be57 	b.w	80006e0 <_port_irq_epilogue>
 8000a32:	bf00      	nop
 8000a34:	40026000 	.word	0x40026000
 8000a38:	20000828 	.word	0x20000828
$d():
 8000a3c:	00000000 	.word	0x00000000

08000a40 <Vector7C>:
Vector7C():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:186
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch5_IRQHandler) {
 8000a40:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:191
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <Vector7C+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:192
  DMA1->IFCR = STM32_DMA_ISR_MASK << 16;
 8000a44:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:191
CH_IRQ_HANDLER(DMA1_Ch5_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000a48:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:192
  DMA1->IFCR = STM32_DMA_ISR_MASK << 16;
 8000a4a:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:193
  if (dma_isr_redir[4].dma_func)
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <Vector7C+0x28>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:191
CH_IRQ_HANDLER(DMA1_Ch5_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000a4e:	f3c1 4103 	ubfx	r1, r1, #16, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:193
  DMA1->IFCR = STM32_DMA_ISR_MASK << 16;
  if (dma_isr_redir[4].dma_func)
 8000a52:	6a13      	ldr	r3, [r2, #32]
 8000a54:	b10b      	cbz	r3, 8000a5a <Vector7C+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:194
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000a56:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000a58:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:197

  CH_IRQ_EPILOGUE();
}
 8000a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:196
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  CH_IRQ_EPILOGUE();
 8000a5e:	f7ff be3f 	b.w	80006e0 <_port_irq_epilogue>
 8000a62:	bf00      	nop
 8000a64:	40026000 	.word	0x40026000
 8000a68:	20000828 	.word	0x20000828
$d():
 8000a6c:	00000000 	.word	0x00000000

08000a70 <Vector80>:
Vector80():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:204
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch6_IRQHandler) {
 8000a70:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:209
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <Vector80+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:210
  DMA1->IFCR = STM32_DMA_ISR_MASK << 20;
 8000a74:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:209
CH_IRQ_HANDLER(DMA1_Ch6_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000a78:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:210
  DMA1->IFCR = STM32_DMA_ISR_MASK << 20;
 8000a7a:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:211
  if (dma_isr_redir[5].dma_func)
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <Vector80+0x28>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:209
CH_IRQ_HANDLER(DMA1_Ch6_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000a7e:	f3c1 5103 	ubfx	r1, r1, #20, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:211
  DMA1->IFCR = STM32_DMA_ISR_MASK << 20;
  if (dma_isr_redir[5].dma_func)
 8000a82:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000a84:	b10b      	cbz	r3, 8000a8a <Vector80+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:212
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000a86:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000a88:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:215

  CH_IRQ_EPILOGUE();
}
 8000a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:214
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  CH_IRQ_EPILOGUE();
 8000a8e:	f7ff be27 	b.w	80006e0 <_port_irq_epilogue>
 8000a92:	bf00      	nop
 8000a94:	40026000 	.word	0x40026000
 8000a98:	20000828 	.word	0x20000828
$d():
 8000a9c:	00000000 	.word	0x00000000

08000aa0 <Vector84>:
Vector84():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:222
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(DMA1_Ch7_IRQHandler) {
 8000aa0:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:227
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <Vector84+0x24>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:228
  DMA1->IFCR = STM32_DMA_ISR_MASK << 24;
 8000aa4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:227
CH_IRQ_HANDLER(DMA1_Ch7_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000aa8:	6819      	ldr	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:228
  DMA1->IFCR = STM32_DMA_ISR_MASK << 24;
 8000aaa:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:229
  if (dma_isr_redir[6].dma_func)
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <Vector84+0x28>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:227
CH_IRQ_HANDLER(DMA1_Ch7_IRQHandler) {
  uint32_t flags;

  CH_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000aae:	f3c1 6103 	ubfx	r1, r1, #24, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:229
  DMA1->IFCR = STM32_DMA_ISR_MASK << 24;
  if (dma_isr_redir[6].dma_func)
 8000ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ab4:	b10b      	cbz	r3, 8000aba <Vector84+0x1a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:230
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000ab6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8000ab8:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:233

  CH_IRQ_EPILOGUE();
}
 8000aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:232
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = STM32_DMA_ISR_MASK << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  CH_IRQ_EPILOGUE();
 8000abe:	f7ff be0f 	b.w	80006e0 <_port_irq_epilogue>
 8000ac2:	bf00      	nop
 8000ac4:	40026000 	.word	0x40026000
 8000ac8:	20000828 	.word	0x20000828
$d():
 8000acc:	00000000 	.word	0x00000000

08000ad0 <dmaInit>:
dmaInit():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:247
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <dmaInit+0x28>)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	4359      	muls	r1, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:249 (discriminator 2)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <dmaInit+0x2c>)
 8000adc:	5889      	ldr	r1, [r1, r2]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	600a      	str	r2, [r1, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:250 (discriminator 2)
    dma_isr_redir[i].dma_func = NULL;
 8000ae2:	4907      	ldr	r1, [pc, #28]	; (8000b00 <dmaInit+0x30>)
 8000ae4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:248 (discriminator 2)
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000ae8:	3301      	adds	r3, #1
 8000aea:	2b07      	cmp	r3, #7
 8000aec:	d1f3      	bne.n	8000ad6 <dmaInit+0x6>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:252
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <dmaInit+0x34>)
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	4770      	bx	lr
 8000af8:	20000860 	.word	0x20000860
 8000afc:	080013d0 	.word	0x080013d0
 8000b00:	20000828 	.word	0x20000828
 8000b04:	40026000 	.word	0x40026000
	...

08000b10 <dmaStreamAllocate>:
dmaStreamAllocate():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:282
 * @special
 */
bool_t dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                         uint32_t priority,
                         stm32_dmaisr_t func,
                         void *param) {
 8000b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b14:	460f      	mov	r7, r1
 8000b16:	4615      	mov	r5, r2
 8000b18:	4698      	mov	r8, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:284

  chDbgCheck(dmastp != NULL, "dmaStreamAllocate");
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	b910      	cbnz	r0, 8000b24 <dmaStreamAllocate+0x14>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:284 (discriminator 1)
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <dmaStreamAllocate+0x78>)
 8000b20:	f000 fa4e 	bl	8000fc0 <chDbgPanic>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:287

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8000b24:	7a62      	ldrb	r2, [r4, #9]
 8000b26:	2001      	movs	r0, #1
 8000b28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b2c:	4e17      	ldr	r6, [pc, #92]	; (8000b8c <dmaStreamAllocate+0x7c>)
 8000b2e:	6831      	ldr	r1, [r6, #0]
 8000b30:	ea1c 0f01 	tst.w	ip, r1
 8000b34:	d126      	bne.n	8000b84 <dmaStreamAllocate+0x74>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:291
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8000b36:	4816      	ldr	r0, [pc, #88]	; (8000b90 <dmaStreamAllocate+0x80>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:293
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8000b38:	ea4c 0301 	orr.w	r3, ip, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:291
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8000b3c:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:293
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8000b40:	6033      	str	r3, [r6, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:292
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8000b42:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:296
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8000b46:	065b      	lsls	r3, r3, #25
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:292
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8000b48:	f8c2 8004 	str.w	r8, [r2, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:296
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8000b4c:	d004      	beq.n	8000b58 <dmaStreamAllocate+0x48>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:297
    rccEnableDMA1(FALSE);
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <dmaStreamAllocate+0x84>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b56:	61da      	str	r2, [r3, #28]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:300

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	681a      	ldr	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:301
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000b5e:	2600      	movs	r6, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:300
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8000b60:	f022 020f 	bic.w	r2, r2, #15
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	7a21      	ldrb	r1, [r4, #8]
 8000b68:	6862      	ldr	r2, [r4, #4]
 8000b6a:	fa00 f101 	lsl.w	r1, r0, r1
 8000b6e:	6011      	str	r1, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:301
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000b70:	601e      	str	r6, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:304

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8000b72:	b135      	cbz	r5, 8000b82 <dmaStreamAllocate+0x72>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:305
    nvicEnableVector(dmastp->vector, CORTEX_PRIORITY_MASK(priority));
 8000b74:	7aa0      	ldrb	r0, [r4, #10]
 8000b76:	0139      	lsls	r1, r7, #4
 8000b78:	f7ff fec2 	bl	8000900 <nvicEnableVector>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:307

  return FALSE;
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b82:	4628      	mov	r0, r5
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/stm32_dma.c:308
}
 8000b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b88:	08001380 	.word	0x08001380
 8000b8c:	20000860 	.word	0x20000860
 8000b90:	20000828 	.word	0x20000828
 8000b94:	40023800 	.word	0x40023800
	...

08000ba0 <_unhandled_exception>:
_unhandled_exception():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../os/hal/vectors.c:169
 * @notapi
 */
#if !defined(__DOXYGEN__)
__attribute__ ((naked))
#endif
void _unhandled_exception(void) {
 8000ba0:	e7fe      	b.n	8000ba0 <_unhandled_exception>
	...

08000bb0 <Clk_t::UpdateFreqValues()>:
_ZN5Clk_t16UpdateFreqValuesEv():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:58
        StartUpCounter++;
    } while(StartUpCounter < HSE_STARTUP_TIMEOUT);
    return 1; // Timeout
}

void Clk_t::UpdateFreqValues() {
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	b093      	sub	sp, #76	; 0x4c
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2220      	movs	r2, #32
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:58
        StartUpCounter++;
    } while(StartUpCounter < HSE_STARTUP_TIMEOUT);
    return 1; // Timeout
}

void Clk_t::UpdateFreqValues() {
 8000bb8:	4605      	mov	r5, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000bba:	a80a      	add	r0, sp, #40	; 0x28
 8000bbc:	f000 fb08 	bl	80011d0 <memset>
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8000bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <Clk_t::UpdateFreqValues()+0xf4>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:63
    const uint8_t PllMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
 8000bd4:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <Clk_t::UpdateFreqValues()+0xf8>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62

void Clk_t::UpdateFreqValues() {
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <Clk_t::UpdateFreqValues()+0xfc>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:63
    const uint8_t PllMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
 8000bda:	6851      	ldr	r1, [r2, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62

void Clk_t::UpdateFreqValues() {
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <Clk_t::UpdateFreqValues()+0x100>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:63
    const uint8_t PllMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
 8000be0:	6810      	ldr	r0, [r2, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62

void Clk_t::UpdateFreqValues() {
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000be2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <Clk_t::UpdateFreqValues()+0x104>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:64
    const uint8_t PllMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
    const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8000be6:	ae06      	add	r6, sp, #24
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:62

void Clk_t::UpdateFreqValues() {
    uint32_t tmp, PllMul, PllDiv;
    uint32_t SysClkHz;
    // Tables
    const uint32_t MSIClk[8] = {65536, 131072, 262144, 524188, 1048000, 2097000, 4194000};
 8000be8:	9310      	str	r3, [sp, #64]	; 0x40
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:63
    const uint8_t PllMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
 8000bea:	ab03      	add	r3, sp, #12
 8000bec:	c303      	stmia	r3!, {r0, r1}
 8000bee:	7a11      	ldrb	r1, [r2, #8]
 8000bf0:	7019      	strb	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:64
    const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8000bf2:	f102 0309 	add.w	r3, r2, #9
 8000bf6:	3219      	adds	r2, #25
 8000bf8:	4617      	mov	r7, r2
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	6859      	ldr	r1, [r3, #4]
 8000bfe:	4634      	mov	r4, r6
 8000c00:	c403      	stmia	r4!, {r0, r1}
 8000c02:	3308      	adds	r3, #8
 8000c04:	4293      	cmp	r3, r2
 8000c06:	4626      	mov	r6, r4
 8000c08:	d1f7      	bne.n	8000bfa <Clk_t::UpdateFreqValues()+0x4a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:65
    const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	ab01      	add	r3, sp, #4
 8000c10:	c303      	stmia	r3!, {r0, r1}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:68

    // Figure out SysClk
    tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <Clk_t::UpdateFreqValues()+0x108>)
 8000c14:	689a      	ldr	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:69
    tmp >>= 2;
 8000c16:	f3c2 0281 	ubfx	r2, r2, #2, #2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:70
    switch(tmp) {
 8000c1a:	2a02      	cmp	r2, #2
 8000c1c:	d024      	beq.n	8000c68 <Clk_t::UpdateFreqValues()+0xb8>
 8000c1e:	2a03      	cmp	r2, #3
 8000c20:	d00c      	beq.n	8000c3c <Clk_t::UpdateFreqValues()+0x8c>
 8000c22:	2a01      	cmp	r2, #1
 8000c24:	d101      	bne.n	8000c2a <Clk_t::UpdateFreqValues()+0x7a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:77
            tmp = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
            SysClkHz = MSIClk[tmp];
            break;

        case 0b01: // HSI
            SysClkHz = HSI_FREQ_HZ;
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <Clk_t::UpdateFreqValues()+0x10c>)
 8000c28:	e01f      	b.n	8000c6a <Clk_t::UpdateFreqValues()+0xba>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:72
    // Figure out SysClk
    tmp = RCC->CFGR & RCC_CFGR_SWS;
    tmp >>= 2;
    switch(tmp) {
        case 0b00: // MSI
            tmp = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000c2a:	685b      	ldr	r3, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:73
            SysClkHz = MSIClk[tmp];
 8000c2c:	a812      	add	r0, sp, #72	; 0x48
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:72
    // Figure out SysClk
    tmp = RCC->CFGR & RCC_CFGR_SWS;
    tmp >>= 2;
    switch(tmp) {
        case 0b00: // MSI
            tmp = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000c2e:	f3c3 3342 	ubfx	r3, r3, #13, #3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:73
            SysClkHz = MSIClk[tmp];
 8000c32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000c36:	f853 3c20 	ldr.w	r3, [r3, #-32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:74
            break;
 8000c3a:	e016      	b.n	8000c6a <Clk_t::UpdateFreqValues()+0xba>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:86
            SysClkHz = CRYSTAL_FREQ_HZ;
            break;

        case 0b11: // PLL used as system clock source
            // Get different PLL dividers
            tmp = (RCC->CFGR & RCC_CFGR_PLLMUL) >> 18;
 8000c3c:	689a      	ldr	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:87
            PllMul = PllMulTable[tmp];
 8000c3e:	a912      	add	r1, sp, #72	; 0x48
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:86
            SysClkHz = CRYSTAL_FREQ_HZ;
            break;

        case 0b11: // PLL used as system clock source
            // Get different PLL dividers
            tmp = (RCC->CFGR & RCC_CFGR_PLLMUL) >> 18;
 8000c40:	f3c2 4283 	ubfx	r2, r2, #18, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:87
            PllMul = PllMulTable[tmp];
 8000c44:	440a      	add	r2, r1
 8000c46:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:88
            PllDiv = ((RCC->CFGR & RCC_CFGR_PLLDIV) >> 22) +1;
 8000c4a:	689a      	ldr	r2, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:90
            // Which src is used as pll input?
            SysClkHz = ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI)? HSI_FREQ_HZ : CRYSTAL_FREQ_HZ;
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <Clk_t::UpdateFreqValues()+0x110>)
 8000c50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <Clk_t::UpdateFreqValues()+0x10c>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:88

        case 0b11: // PLL used as system clock source
            // Get different PLL dividers
            tmp = (RCC->CFGR & RCC_CFGR_PLLMUL) >> 18;
            PllMul = PllMulTable[tmp];
            PllDiv = ((RCC->CFGR & RCC_CFGR_PLLDIV) >> 22) +1;
 8000c56:	f3c2 5281 	ubfx	r2, r2, #22, #2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:90
            // Which src is used as pll input?
            SysClkHz = ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI)? HSI_FREQ_HZ : CRYSTAL_FREQ_HZ;
 8000c5a:	bf18      	it	ne
 8000c5c:	4603      	movne	r3, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:91
            SysClkHz = (SysClkHz * PllMul) / PllDiv;
 8000c5e:	434b      	muls	r3, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:88

        case 0b11: // PLL used as system clock source
            // Get different PLL dividers
            tmp = (RCC->CFGR & RCC_CFGR_PLLMUL) >> 18;
            PllMul = PllMulTable[tmp];
            PllDiv = ((RCC->CFGR & RCC_CFGR_PLLDIV) >> 22) +1;
 8000c60:	3201      	adds	r2, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:91
            // Which src is used as pll input?
            SysClkHz = ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI)? HSI_FREQ_HZ : CRYSTAL_FREQ_HZ;
            SysClkHz = (SysClkHz * PllMul) / PllDiv;
 8000c62:	fbb3 f3f2 	udiv	r3, r3, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:92
            break;
 8000c66:	e000      	b.n	8000c6a <Clk_t::UpdateFreqValues()+0xba>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:81
        case 0b01: // HSI
            SysClkHz = HSI_FREQ_HZ;
            break;

        case 0b10: // HSE
            SysClkHz = CRYSTAL_FREQ_HZ;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <Clk_t::UpdateFreqValues()+0x110>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:96
            SysClkHz = (SysClkHz * PllMul) / PllDiv;
            break;
    } // switch

    // AHB freq
    tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <Clk_t::UpdateFreqValues()+0x108>)
 8000c6c:	a812      	add	r0, sp, #72	; 0x48
 8000c6e:	6891      	ldr	r1, [r2, #8]
 8000c70:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000c74:	4401      	add	r1, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:97
    AHBFreqHz = SysClkHz >> tmp;
 8000c76:	f811 1c30 	ldrb.w	r1, [r1, #-48]
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	602b      	str	r3, [r5, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:99
    // APB freq
    tmp = APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> 8];
 8000c7e:	6891      	ldr	r1, [r2, #8]
 8000c80:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8000c84:	4401      	add	r1, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:100
    APB1FreqHz = AHBFreqHz >> tmp;
 8000c86:	f811 1c44 	ldrb.w	r1, [r1, #-68]
 8000c8a:	fa23 f101 	lsr.w	r1, r3, r1
 8000c8e:	6069      	str	r1, [r5, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:101
    tmp = APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> 11];
 8000c90:	6892      	ldr	r2, [r2, #8]
 8000c92:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8000c96:	4402      	add	r2, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:102
    APB2FreqHz = AHBFreqHz >> tmp;
 8000c98:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8000c9c:	40d3      	lsrs	r3, r2
 8000c9e:	60ab      	str	r3, [r5, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/clocking_L1xx.cpp:103
}
 8000ca0:	b013      	add	sp, #76	; 0x4c
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	0007ff9c 	.word	0x0007ff9c
 8000ca8:	08001270 	.word	0x08001270
 8000cac:	000ffdc0 	.word	0x000ffdc0
 8000cb0:	001fff68 	.word	0x001fff68
 8000cb4:	003ffed0 	.word	0x003ffed0
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	00f42400 	.word	0x00f42400
 8000cc0:	007a1200 	.word	0x007a1200
	...

08000cd0 <CmdUart_t::IPutChar(char)>:
_ZN9CmdUart_t8IPutCharEc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:16
CmdUart_t Uart;

static inline void FPutChar(char c) { Uart.IPutChar(c); }

void CmdUart_t::IPutChar(char c) {
    *PWrite++ = c;
 8000cd0:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	f8c0 25e0 	str.w	r2, [r0, #1504]	; 0x5e0
 8000cda:	7019      	strb	r1, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:17
    if(PWrite >= &TXBuf[UART_TXBUF_SIZE]) PWrite = TXBuf;   // Circulate buffer
 8000cdc:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8000ce0:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	bf28      	it	cs
 8000ce8:	f8c0 05e0 	strcs.w	r0, [r0, #1504]	; 0x5e0
 8000cec:	4770      	bx	lr
	...

08000cf0 <FPutChar(char)>:
FPutChar():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:13
#include "cmd_uart.h"
#include <string.h>

CmdUart_t Uart;

static inline void FPutChar(char c) { Uart.IPutChar(c); }
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	4801      	ldr	r0, [pc, #4]	; (8000cf8 <FPutChar(char)+0x8>)
 8000cf4:	f7ff bfec 	b.w	8000cd0 <CmdUart_t::IPutChar(char)>
 8000cf8:	20000870 	.word	0x20000870
$d():
 8000cfc:	00000000 	.word	0x00000000

08000d00 <CmdUart_t::ISendViaDMA()>:
_ZN9CmdUart_t11ISendViaDMAEv():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:45
    // Start transmission if Idle
    if(IDmaIsIdle) ISendViaDMA();
}

void CmdUart_t::ISendViaDMA() {
    uint32_t PartSz = (TXBuf + UART_TXBUF_SIZE) - PRead; // Cnt from PRead to end of buf
 8000d00:	f8d0 15dc 	ldr.w	r1, [r0, #1500]	; 0x5dc
 8000d04:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 8000d08:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 8000d0c:	1a52      	subs	r2, r2, r1
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	bf28      	it	cs
 8000d12:	461a      	movcs	r2, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:46
    ITransSize = MIN(IFullSlotsCount, PartSz);
 8000d14:	f8c0 25ec 	str.w	r2, [r0, #1516]	; 0x5ec
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:47
    if(ITransSize != 0) {
 8000d18:	b162      	cbz	r2, 8000d34 <CmdUart_t::ISendViaDMA()+0x34>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:48
        IDmaIsIdle = false;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f880 35e4 	strb.w	r3, [r0, #1508]	; 0x5e4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:49
        dmaStreamSetMemory0(UART_DMA_TX, PRead);
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <CmdUart_t::ISendViaDMA()+0x38>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	60d9      	str	r1, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:50
        dmaStreamSetTransactionSize(UART_DMA_TX, ITransSize);
 8000d26:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:51
        dmaStreamSetMode(UART_DMA_TX, UART_DMA_TX_MODE);
 8000d28:	2292      	movs	r2, #146	; 0x92
 8000d2a:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:52
        dmaStreamEnable(UART_DMA_TX);
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	080013d0 	.word	0x080013d0
$d():
 8000d3c:	00000000 	.word	0x00000000

08000d40 <CmdUart_t::IPrintf(char const*, std::__va_list)>:
_ZN9CmdUart_t7IPrintfEPKcSt9__va_list():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:37
    IPrintf(format, args);
    va_end(args);
}


void CmdUart_t::IPrintf(const char *format, va_list args) {
 8000d40:	b558      	push	{r3, r4, r6, lr}
 8000d42:	460e      	mov	r6, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:38
    int32_t MaxLength = UART_TXBUF_SIZE - IFullSlotsCount;
 8000d44:	f8d0 15e8 	ldr.w	r1, [r0, #1512]	; 0x5e8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:37
    IPrintf(format, args);
    va_end(args);
}


void CmdUart_t::IPrintf(const char *format, va_list args) {
 8000d48:	4604      	mov	r4, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:39
    int32_t MaxLength = UART_TXBUF_SIZE - IFullSlotsCount;
    IFullSlotsCount += kl_vsprintf(FPutChar, MaxLength, format, args);
 8000d4a:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:37
    IPrintf(format, args);
    va_end(args);
}


void CmdUart_t::IPrintf(const char *format, va_list args) {
 8000d4e:	4613      	mov	r3, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:39
    int32_t MaxLength = UART_TXBUF_SIZE - IFullSlotsCount;
    IFullSlotsCount += kl_vsprintf(FPutChar, MaxLength, format, args);
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <CmdUart_t::IPrintf(char const*, std::__va_list)+0x38>)
 8000d52:	3104      	adds	r1, #4
 8000d54:	4632      	mov	r2, r6
 8000d56:	f000 f98b 	bl	8001070 <kl_vsprintf>
 8000d5a:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8000d5e:	4418      	add	r0, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:41
    // Start transmission if Idle
    if(IDmaIsIdle) ISendViaDMA();
 8000d60:	f894 35e4 	ldrb.w	r3, [r4, #1508]	; 0x5e4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:39
}


void CmdUart_t::IPrintf(const char *format, va_list args) {
    int32_t MaxLength = UART_TXBUF_SIZE - IFullSlotsCount;
    IFullSlotsCount += kl_vsprintf(FPutChar, MaxLength, format, args);
 8000d64:	f8c4 05e8 	str.w	r0, [r4, #1512]	; 0x5e8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:41
    // Start transmission if Idle
    if(IDmaIsIdle) ISendViaDMA();
 8000d68:	b123      	cbz	r3, 8000d74 <CmdUart_t::IPrintf(char const*, std::__va_list)+0x34>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:41 (discriminator 1)
 8000d6a:	4620      	mov	r0, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:42 (discriminator 1)
}
 8000d6c:	e8bd 4058 	ldmia.w	sp!, {r3, r4, r6, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:41 (discriminator 1)

void CmdUart_t::IPrintf(const char *format, va_list args) {
    int32_t MaxLength = UART_TXBUF_SIZE - IFullSlotsCount;
    IFullSlotsCount += kl_vsprintf(FPutChar, MaxLength, format, args);
    // Start transmission if Idle
    if(IDmaIsIdle) ISendViaDMA();
 8000d70:	f7ff bfc6 	b.w	8000d00 <CmdUart_t::ISendViaDMA()>
 8000d74:	bd58      	pop	{r3, r4, r6, pc}
 8000d76:	bf00      	nop
 8000d78:	08000cf1 	.word	0x08000cf1
$d():
 8000d7c:	00000000 	.word	0x00000000

08000d80 <CmdUart_t::Printf(char const*, ...)>:
_ZN9CmdUart_t6PrintfEPKcz():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:20
void CmdUart_t::IPutChar(char c) {
    *PWrite++ = c;
    if(PWrite >= &TXBuf[UART_TXBUF_SIZE]) PWrite = TXBuf;   // Circulate buffer
}

void CmdUart_t::Printf(const char *format, ...) {
 8000d80:	b40e      	push	{r1, r2, r3}
 8000d82:	b503      	push	{r0, r1, lr}
 8000d84:	aa03      	add	r2, sp, #12
 8000d86:	f852 1b04 	ldr.w	r1, [r2], #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:21
    chSysLock();
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:23
    va_list args;
    va_start(args, format);
 8000d90:	9201      	str	r2, [sp, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:24
    IPrintf(format, args);
 8000d92:	f7ff ffd5 	bl	8000d40 <CmdUart_t::IPrintf(char const*, std::__va_list)>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:26
    va_end(args);
    chSysUnlock();
 8000d96:	2300      	movs	r3, #0
 8000d98:	f383 8811 	msr	BASEPRI, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:27
}
 8000d9c:	b002      	add	sp, #8
 8000d9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000da2:	b003      	add	sp, #12
 8000da4:	4770      	bx	lr
	...

08000db0 <CmdUart_t::Init(unsigned long)>:
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:91
// Wrapper for TX IRQ
extern "C" {
void CmdUartTxIrq(void *p, uint32_t flags) { Uart.IRQDmaTxHandler(); }
}

void CmdUart_t::Init(uint32_t ABaudrate) {
 8000db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:182
static inline void PinToggle (GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { PGpioPort->ODR  ^= (uint16_t)(1<<APinNumber); }
// Check state
static inline bool PinIsSet(GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { return (PGpioPort->IDR & (uint32_t)(1<<APinNumber)); }
// Setup
static inline void PinClockEnable(GPIO_TypeDef *PGpioPort) {
    if     (PGpioPort == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000db4:	4f54      	ldr	r7, [pc, #336]	; (8000f08 <CmdUart_t::Init(unsigned long)+0x158>)
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:95
    PWrite = TXBuf;
    PRead = TXBuf;
    IDmaIsIdle = true;
    IFullSlotsCount = 0;
 8000db6:	f04f 0800 	mov.w	r8, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:91
// Wrapper for TX IRQ
extern "C" {
void CmdUartTxIrq(void *p, uint32_t flags) { Uart.IRQDmaTxHandler(); }
}

void CmdUart_t::Init(uint32_t ABaudrate) {
 8000dba:	4606      	mov	r6, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:92
    PWrite = TXBuf;
 8000dbc:	f8c6 05e0 	str.w	r0, [r6, #1504]	; 0x5e0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:93
    PRead = TXBuf;
 8000dc0:	f8c6 05dc 	str.w	r0, [r6, #1500]	; 0x5dc
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:94
    IDmaIsIdle = true;
 8000dc4:	2301      	movs	r3, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:95
    IFullSlotsCount = 0;
 8000dc6:	f8c0 85e8 	str.w	r8, [r0, #1512]	; 0x5e8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:94
}

void CmdUart_t::Init(uint32_t ABaudrate) {
    PWrite = TXBuf;
    PRead = TXBuf;
    IDmaIsIdle = true;
 8000dca:	f880 35e4 	strb.w	r3, [r0, #1508]	; 0x5e4
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:182
 8000dce:	69fb      	ldr	r3, [r7, #28]
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:244
        const PinSpeed_t ASpeed = ps10MHz) {
    // Clock
    PinClockEnable(PGpioPort);
    uint32_t Offset = APinNumber*2;
    // Setup mode
    PGpioPort->MODER &= ~(0b11 << Offset);  // clear previous bits
 8000dd0:	4c4e      	ldr	r4, [pc, #312]	; (8000f0c <CmdUart_t::Init(unsigned long)+0x15c>)
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:182
static inline void PinToggle (GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { PGpioPort->ODR  ^= (uint16_t)(1<<APinNumber); }
// Check state
static inline bool PinIsSet(GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { return (PGpioPort->IDR & (uint32_t)(1<<APinNumber)); }
// Setup
static inline void PinClockEnable(GPIO_TypeDef *PGpioPort) {
    if     (PGpioPort == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:244
        const PinSpeed_t ASpeed = ps10MHz) {
    // Clock
    PinClockEnable(PGpioPort);
    uint32_t Offset = APinNumber*2;
    // Setup mode
    PGpioPort->MODER &= ~(0b11 << Offset);  // clear previous bits
 8000dd8:	6823      	ldr	r3, [r4, #0]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:100
    IFullSlotsCount = 0;
    PinSetupAlterFunc(UART_GPIO, UART_TX_PIN, omPushPull, pudNone, UART_AF);

    // ==== USART configuration ====
    UART_RCC_ENABLE();
    UART->CR1 = USART_CR1_UE;     // Enable USART
 8000dda:	4d4d      	ldr	r5, [pc, #308]	; (8000f10 <CmdUart_t::Init(unsigned long)+0x160>)
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:244
 8000ddc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000de0:	6023      	str	r3, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:245
    PGpioPort->MODER |= 0b10 << Offset;     // Set new bits
 8000de2:	6823      	ldr	r3, [r4, #0]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:105
    if(UART == USART1) UART->BRR = Clk.APB2FreqHz / ABaudrate;
    else               UART->BRR = Clk.APB1FreqHz / ABaudrate;
    UART->CR2 = 0;
    // ==== DMA ====
    dmaStreamAllocate     (UART_DMA_TX, IRQ_PRIO_HIGH, CmdUartTxIrq, NULL);
 8000de4:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000f1c <CmdUart_t::Init(unsigned long)+0x16c>
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:245
 8000de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dec:	6023      	str	r3, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:247
    // Setup output type
    PGpioPort->OTYPER &= ~(1<<APinNumber);
 8000dee:	88a0      	ldrh	r0, [r4, #4]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:105
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <CmdUart_t::Init(unsigned long)+0x164>)
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:247
 8000df2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8000df6:	0400      	lsls	r0, r0, #16
 8000df8:	0c00      	lsrs	r0, r0, #16
 8000dfa:	80a0      	strh	r0, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:248
    PGpioPort->OTYPER |= (uint32_t)PinOutMode << APinNumber;
 8000dfc:	88a3      	ldrh	r3, [r4, #4]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:106
    dmaStreamSetPeripheral(UART_DMA_TX, &UART->DR);
 8000dfe:	46d9      	mov	r9, fp
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:248
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	80a3      	strh	r3, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:250
    // Setup Pull-Up or Pull-Down
    PGpioPort->PUPDR &= ~(0b11 << Offset); // clear previous bits
 8000e04:	68e3      	ldr	r3, [r4, #12]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:105
    UART->CR1 = USART_CR1_UE;     // Enable USART
    if(UART == USART1) UART->BRR = Clk.APB2FreqHz / ABaudrate;
    else               UART->BRR = Clk.APB1FreqHz / ABaudrate;
    UART->CR2 = 0;
    // ==== DMA ====
    dmaStreamAllocate     (UART_DMA_TX, IRQ_PRIO_HIGH, CmdUartTxIrq, NULL);
 8000e06:	4658      	mov	r0, fp
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:250
 8000e08:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e0c:	60e3      	str	r3, [r4, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:251
    PGpioPort->PUPDR |= (uint32_t)APullUpDown << Offset;
 8000e0e:	68e3      	ldr	r3, [r4, #12]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:106
    dmaStreamSetPeripheral(UART_DMA_TX, &UART->DR);
 8000e10:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000f20 <CmdUart_t::Init(unsigned long)+0x170>
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:251
 8000e14:	60e3      	str	r3, [r4, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:253
    // Setup speed
    PGpioPort->OSPEEDR &= ~(0b11 << Offset); // clear previous bits
 8000e16:	68a3      	ldr	r3, [r4, #8]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:117

    PinSetupAlterFunc(UART_GPIO, UART_RX_PIN,  omOpenDrain, pudPullUp, UART_AF);

    dmaStreamAllocate     (UART_DMA_RX, IRQ_PRIO_LOW, nullptr, NULL);
    dmaStreamSetPeripheral(UART_DMA_RX, &UART->DR);
    dmaStreamSetMemory0   (UART_DMA_RX, IRxBuf);
 8000e18:	f506 66bf 	add.w	r6, r6, #1528	; 0x5f8
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:253
 8000e1c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e20:	60a3      	str	r3, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:254
    PGpioPort->OSPEEDR |= (uint32_t)ASpeed << Offset;
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e28:	60a3      	str	r3, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:258
    // Setup Alternate Function
    uint32_t n = (APinNumber <= 7)? 0 : 1;      // 0 if 0...7, 1 if 8..15
    Offset = 4 * ((APinNumber <= 7)? APinNumber : APinNumber - 8);
    PGpioPort->AFR[n] &= ~(0b1111 << Offset);
 8000e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e30:	6263      	str	r3, [r4, #36]	; 0x24
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:259
    PGpioPort->AFR[n] |= (uint32_t)AAlterFunc << Offset;
 8000e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e34:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000e38:	6263      	str	r3, [r4, #36]	; 0x24
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:99
    IDmaIsIdle = true;
    IFullSlotsCount = 0;
    PinSetupAlterFunc(UART_GPIO, UART_TX_PIN, omPushPull, pudNone, UART_AF);

    // ==== USART configuration ====
    UART_RCC_ENABLE();
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	623b      	str	r3, [r7, #32]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:100
    UART->CR1 = USART_CR1_UE;     // Enable USART
 8000e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e46:	81ab      	strh	r3, [r5, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:101
    if(UART == USART1) UART->BRR = Clk.APB2FreqHz / ABaudrate;
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <CmdUart_t::Init(unsigned long)+0x168>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	fbb3 f1f1 	udiv	r1, r3, r1
 8000e50:	b28b      	uxth	r3, r1
 8000e52:	812b      	strh	r3, [r5, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:105
    else               UART->BRR = Clk.APB1FreqHz / ABaudrate;
    UART->CR2 = 0;
    // ==== DMA ====
    dmaStreamAllocate     (UART_DMA_TX, IRQ_PRIO_HIGH, CmdUartTxIrq, NULL);
 8000e54:	2107      	movs	r1, #7
 8000e56:	4643      	mov	r3, r8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:103
    // ==== USART configuration ====
    UART_RCC_ENABLE();
    UART->CR1 = USART_CR1_UE;     // Enable USART
    if(UART == USART1) UART->BRR = Clk.APB2FreqHz / ABaudrate;
    else               UART->BRR = Clk.APB1FreqHz / ABaudrate;
    UART->CR2 = 0;
 8000e58:	f8a5 8010 	strh.w	r8, [r5, #16]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:105
    // ==== DMA ====
    dmaStreamAllocate     (UART_DMA_TX, IRQ_PRIO_HIGH, CmdUartTxIrq, NULL);
 8000e5c:	f7ff fe58 	bl	8000b10 <dmaStreamAllocate>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:106
    dmaStreamSetPeripheral(UART_DMA_TX, &UART->DR);
 8000e60:	f859 3924 	ldr.w	r3, [r9], #-36
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:107
    dmaStreamSetMode      (UART_DMA_TX, UART_DMA_TX_MODE);
 8000e64:	2292      	movs	r2, #146	; 0x92
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:106
    if(UART == USART1) UART->BRR = Clk.APB2FreqHz / ABaudrate;
    else               UART->BRR = Clk.APB1FreqHz / ABaudrate;
    UART->CR2 = 0;
    // ==== DMA ====
    dmaStreamAllocate     (UART_DMA_TX, IRQ_PRIO_HIGH, CmdUartTxIrq, NULL);
    dmaStreamSetPeripheral(UART_DMA_TX, &UART->DR);
 8000e66:	f8c3 a008 	str.w	sl, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:107
    dmaStreamSetMode      (UART_DMA_TX, UART_DMA_TX_MODE);
 8000e6a:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:110

#if UART_RX_ENABLED
    UART->CR1 = USART_CR1_TE | USART_CR1_RE;        // TX & RX enable
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	81ab      	strh	r3, [r5, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:111
    UART->CR3 = USART_CR3_DMAT | USART_CR3_DMAR;    // Enable DMA at TX & RX
 8000e70:	23c0      	movs	r3, #192	; 0xc0
 8000e72:	82ab      	strh	r3, [r5, #20]
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:182
static inline void PinToggle (GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { PGpioPort->ODR  ^= (uint16_t)(1<<APinNumber); }
// Check state
static inline bool PinIsSet(GPIO_TypeDef *PGpioPort, const uint16_t APinNumber) { return (PGpioPort->IDR & (uint32_t)(1<<APinNumber)); }
// Setup
static inline void PinClockEnable(GPIO_TypeDef *PGpioPort) {
    if     (PGpioPort == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000e74:	69fb      	ldr	r3, [r7, #28]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:115

    PinSetupAlterFunc(UART_GPIO, UART_RX_PIN,  omOpenDrain, pudPullUp, UART_AF);

    dmaStreamAllocate     (UART_DMA_RX, IRQ_PRIO_LOW, nullptr, NULL);
 8000e76:	4642      	mov	r2, r8
PinClockEnable():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:182
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	61fb      	str	r3, [r7, #28]
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:244
        const PinSpeed_t ASpeed = ps10MHz) {
    // Clock
    PinClockEnable(PGpioPort);
    uint32_t Offset = APinNumber*2;
    // Setup mode
    PGpioPort->MODER &= ~(0b11 << Offset);  // clear previous bits
 8000e7e:	6823      	ldr	r3, [r4, #0]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:115
 8000e80:	f10b 000c 	add.w	r0, fp, #12
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:244
 8000e84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e88:	6023      	str	r3, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:245
    PGpioPort->MODER |= 0b10 << Offset;     // Set new bits
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6023      	str	r3, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:247
    // Setup output type
    PGpioPort->OTYPER &= ~(1<<APinNumber);
 8000e92:	88a1      	ldrh	r1, [r4, #4]
 8000e94:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000e98:	0409      	lsls	r1, r1, #16
 8000e9a:	0c09      	lsrs	r1, r1, #16
 8000e9c:	80a1      	strh	r1, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:248
    PGpioPort->OTYPER |= (uint32_t)PinOutMode << APinNumber;
 8000e9e:	88a3      	ldrh	r3, [r4, #4]
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:115
 8000ea0:	210f      	movs	r1, #15
PinSetupAlterFunc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:248
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea8:	80a3      	strh	r3, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:250
    // Setup Pull-Up or Pull-Down
    PGpioPort->PUPDR &= ~(0b11 << Offset); // clear previous bits
 8000eaa:	68e3      	ldr	r3, [r4, #12]
 8000eac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000eb0:	60e3      	str	r3, [r4, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:251
    PGpioPort->PUPDR |= (uint32_t)APullUpDown << Offset;
 8000eb2:	68e3      	ldr	r3, [r4, #12]
 8000eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eb8:	60e3      	str	r3, [r4, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:253
    // Setup speed
    PGpioPort->OSPEEDR &= ~(0b11 << Offset); // clear previous bits
 8000eba:	68a3      	ldr	r3, [r4, #8]
 8000ebc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ec0:	60a3      	str	r3, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:254
    PGpioPort->OSPEEDR |= (uint32_t)ASpeed << Offset;
 8000ec2:	68a3      	ldr	r3, [r4, #8]
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec8:	60a3      	str	r3, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:258
    // Setup Alternate Function
    uint32_t n = (APinNumber <= 7)? 0 : 1;      // 0 if 0...7, 1 if 8..15
    Offset = 4 * ((APinNumber <= 7)? APinNumber : APinNumber - 8);
    PGpioPort->AFR[n] &= ~(0b1111 << Offset);
 8000eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ecc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ed0:	6263      	str	r3, [r4, #36]	; 0x24
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.h:259
    PGpioPort->AFR[n] |= (uint32_t)AAlterFunc << Offset;
 8000ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ed4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ed8:	6263      	str	r3, [r4, #36]	; 0x24
_ZN9CmdUart_t4InitEm():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:115
 8000eda:	4643      	mov	r3, r8
 8000edc:	f7ff fe18 	bl	8000b10 <dmaStreamAllocate>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:116
    dmaStreamSetPeripheral(UART_DMA_RX, &UART->DR);
 8000ee0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:118
    dmaStreamSetMemory0   (UART_DMA_RX, IRxBuf);
    dmaStreamSetTransactionSize(UART_DMA_RX, UART_RXBUF_SZ);
 8000ee4:	2248      	movs	r2, #72	; 0x48
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:116
    UART->CR3 = USART_CR3_DMAT | USART_CR3_DMAR;    // Enable DMA at TX & RX

    PinSetupAlterFunc(UART_GPIO, UART_RX_PIN,  omOpenDrain, pudPullUp, UART_AF);

    dmaStreamAllocate     (UART_DMA_RX, IRQ_PRIO_LOW, nullptr, NULL);
    dmaStreamSetPeripheral(UART_DMA_RX, &UART->DR);
 8000ee6:	f8c3 a008 	str.w	sl, [r3, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:117
    dmaStreamSetMemory0   (UART_DMA_RX, IRxBuf);
 8000eea:	60de      	str	r6, [r3, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:118
    dmaStreamSetTransactionSize(UART_DMA_RX, UART_RXBUF_SZ);
 8000eec:	605a      	str	r2, [r3, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:119
    dmaStreamSetMode      (UART_DMA_RX, UART_DMA_RX_MODE);
 8000eee:	22a0      	movs	r2, #160	; 0xa0
 8000ef0:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:120
    dmaStreamEnable       (UART_DMA_RX);
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f042 0201 	orr.w	r2, r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:125
#else
    UART->CR1 = USART_CR1_TE;     // Transmitter enabled
    UART->CR3 = USART_CR3_DMAT;   // Enable DMA at transmitter
#endif
    UART->CR1 |= USART_CR1_UE;    // Enable USART
 8000efa:	89ab      	ldrh	r3, [r5, #12]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f02:	81ab      	strh	r3, [r5, #12]
 8000f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40013800 	.word	0x40013800
 8000f14:	08000f91 	.word	0x08000f91
 8000f18:	20000864 	.word	0x20000864
 8000f1c:	080013f4 	.word	0x080013f4
 8000f20:	40013804 	.word	0x40013804
	...

08000f30 <CmdUart_t::IRQDmaTxHandler()>:
_ZN9CmdUart_t15IRQDmaTxHandlerEv():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:130
}

// ==== TX DMA IRQ ====
void CmdUart_t::IRQDmaTxHandler() {
    dmaStreamDisable(UART_DMA_TX);    // Registers may be changed only when stream is disabled
 8000f30:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <CmdUart_t::IRQDmaTxHandler()+0x50>)
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:129
#endif
    UART->CR1 |= USART_CR1_UE;    // Enable USART
}

// ==== TX DMA IRQ ====
void CmdUart_t::IRQDmaTxHandler() {
 8000f32:	b510      	push	{r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:130
    dmaStreamDisable(UART_DMA_TX);    // Registers may be changed only when stream is disabled
 8000f34:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000f36:	680c      	ldr	r4, [r1, #0]
 8000f38:	f024 040f 	bic.w	r4, r4, #15
 8000f3c:	600c      	str	r4, [r1, #0]
 8000f3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000f40:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000f44:	240f      	movs	r4, #15
 8000f46:	fa04 f202 	lsl.w	r2, r4, r2
 8000f4a:	600a      	str	r2, [r1, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:132
    IFullSlotsCount -= ITransSize;
    PRead += ITransSize;
 8000f4c:	f8d0 45dc 	ldr.w	r4, [r0, #1500]	; 0x5dc
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:131
}

// ==== TX DMA IRQ ====
void CmdUart_t::IRQDmaTxHandler() {
    dmaStreamDisable(UART_DMA_TX);    // Registers may be changed only when stream is disabled
    IFullSlotsCount -= ITransSize;
 8000f50:	f8d0 15ec 	ldr.w	r1, [r0, #1516]	; 0x5ec
 8000f54:	f8d0 25e8 	ldr.w	r2, [r0, #1512]	; 0x5e8
 8000f58:	1a52      	subs	r2, r2, r1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:132
    PRead += ITransSize;
 8000f5a:	4421      	add	r1, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:133
    if(PRead >= (TXBuf + UART_TXBUF_SIZE)) PRead = TXBuf; // Circulate pointer
 8000f5c:	f200 54dc 	addw	r4, r0, #1500	; 0x5dc
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:132

// ==== TX DMA IRQ ====
void CmdUart_t::IRQDmaTxHandler() {
    dmaStreamDisable(UART_DMA_TX);    // Registers may be changed only when stream is disabled
    IFullSlotsCount -= ITransSize;
    PRead += ITransSize;
 8000f60:	42a1      	cmp	r1, r4
 8000f62:	bf28      	it	cs
 8000f64:	4601      	movcs	r1, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:131
}

// ==== TX DMA IRQ ====
void CmdUart_t::IRQDmaTxHandler() {
    dmaStreamDisable(UART_DMA_TX);    // Registers may be changed only when stream is disabled
    IFullSlotsCount -= ITransSize;
 8000f66:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:132
    PRead += ITransSize;
 8000f6a:	f8c0 15dc 	str.w	r1, [r0, #1500]	; 0x5dc
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:135
    if(PRead >= (TXBuf + UART_TXBUF_SIZE)) PRead = TXBuf; // Circulate pointer

    if(IFullSlotsCount == 0) IDmaIsIdle = true; // Nothing left to send
 8000f6e:	b91a      	cbnz	r2, 8000f78 <CmdUart_t::IRQDmaTxHandler()+0x48>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:135 (discriminator 1)
 8000f70:	2201      	movs	r2, #1
 8000f72:	f880 25e4 	strb.w	r2, [r0, #1508]	; 0x5e4
 8000f76:	bd10      	pop	{r4, pc}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:137
    else ISendViaDMA();
}
 8000f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:136
    IFullSlotsCount -= ITransSize;
    PRead += ITransSize;
    if(PRead >= (TXBuf + UART_TXBUF_SIZE)) PRead = TXBuf; // Circulate pointer

    if(IFullSlotsCount == 0) IDmaIsIdle = true; // Nothing left to send
    else ISendViaDMA();
 8000f7c:	f7ff bec0 	b.w	8000d00 <CmdUart_t::ISendViaDMA()>
 8000f80:	080013d0 	.word	0x080013d0
	...

08000f90 <CmdUartTxIrq>:
CmdUartTxIrq():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.cpp:88
#endif

// ==== Init & DMA ====
// Wrapper for TX IRQ
extern "C" {
void CmdUartTxIrq(void *p, uint32_t flags) { Uart.IRQDmaTxHandler(); }
 8000f90:	4801      	ldr	r0, [pc, #4]	; (8000f98 <CmdUartTxIrq+0x8>)
 8000f92:	f7ff bfcd 	b.w	8000f30 <CmdUart_t::IRQDmaTxHandler()>
 8000f96:	bf00      	nop
 8000f98:	20000870 	.word	0x20000870
$d():
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <CmdUart_t::PrintNow(char const*) [clone .isra.12]>:
_ZN9CmdUart_t8PrintNowEPKc():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:98
#endif
public:
    void Printf(const char *S, ...);
    void PrintfI(const char *S, ...);
    void FlushTx() { while(!IDmaIsIdle); }  // wait DMA
    void PrintNow(const char *S) {
 8000fa0:	3801      	subs	r0, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:99
        while(*S != 0) {
 8000fa2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000fa6:	b12b      	cbz	r3, 8000fb4 <CmdUart_t::PrintNow(char const*) [clone .isra.12]+0x14>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:100
            while(!(UART->SR & USART_SR_TXE));
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <CmdUart_t::PrintNow(char const*) [clone .isra.12]+0x18>)
 8000faa:	8811      	ldrh	r1, [r2, #0]
 8000fac:	0609      	lsls	r1, r1, #24
 8000fae:	d5fb      	bpl.n	8000fa8 <CmdUart_t::PrintNow(char const*) [clone .isra.12]+0x8>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:101
            UART->DR = *S++;
 8000fb0:	8093      	strh	r3, [r2, #4]
 8000fb2:	e7f6      	b.n	8000fa2 <CmdUart_t::PrintNow(char const*) [clone .isra.12]+0x2>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/cmd_uart.h:103
        }
    }
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40013800 	.word	0x40013800
$d():
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <chDbgPanic>:
chDbgPanic():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:144
    Tim->PSC = (uint16_t)FPrescaler;
}
#endif

#if CH_DBG_ENABLED // ========================= DEBUG ==========================
void chDbgPanic(const char *msg1) {
 8000fc0:	b508      	push	{r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:145
    Uart.PrintNow(msg1);
 8000fc2:	f7ff ffed 	bl	8000fa0 <CmdUart_t::PrintNow(char const*) [clone .isra.12]>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:146
    Uart.PrintNow(" @");
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <chDbgPanic+0x20>)
 8000fc8:	f7ff ffea 	bl	8000fa0 <CmdUart_t::PrintNow(char const*) [clone .isra.12]>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:147
    Uart.PrintNow(chThdSelf()->p_name);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <chDbgPanic+0x24>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	6998      	ldr	r0, [r3, #24]
 8000fd2:	f7ff ffe5 	bl	8000fa0 <CmdUart_t::PrintNow(char const*) [clone .isra.12]>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:149
    Uart.PrintNow("\r");
}
 8000fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_lib_L15x.cpp:148
#if CH_DBG_ENABLED // ========================= DEBUG ==========================
void chDbgPanic(const char *msg1) {
    Uart.PrintNow(msg1);
    Uart.PrintNow(" @");
    Uart.PrintNow(chThdSelf()->p_name);
    Uart.PrintNow("\r");
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <chDbgPanic+0x28>)
 8000fdc:	f7ff bfe0 	b.w	8000fa0 <CmdUart_t::PrintNow(char const*) [clone .isra.12]>
 8000fe0:	08001430 	.word	0x08001430
 8000fe4:	20000f40 	.word	0x20000f40
 8000fe8:	08001433 	.word	0x08001433
$d():
 8000fec:	00000000 	.word	0x00000000

08000ff0 <IPutUint.4105>:
IPutUint():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:11
    uint32_t CharCnt = 0, width = 0;
    bool zero_padded = false;
    // Print number n to buffer p in base base. If number is shorter
    // than width, it's prepended with spaces or zeros (if zero_padded
    // is set) from the left.
    void IPutUint(uint32_t n, uint32_t base) {
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	4664      	mov	r4, ip
 8000ff4:	b085      	sub	sp, #20
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:13
        char digits[10];
        uint32_t len = 0;
 8000ff6:	2500      	movs	r5, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:16
        // Place digits to buffer
        do {
            uint32_t digit = n % base;
 8000ff8:	fbb0 f3f1 	udiv	r3, r0, r1
 8000ffc:	fb01 0213 	mls	r2, r1, r3, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:18
            n /= base;
            digits[len++] = (digit < 10)? '0'+digit : 'A'+digit-10;
 8001000:	2a09      	cmp	r2, #9
 8001002:	f105 0501 	add.w	r5, r5, #1
 8001006:	bf94      	ite	ls
 8001008:	3230      	addls	r2, #48	; 0x30
 800100a:	3237      	addhi	r2, #55	; 0x37
 800100c:	ae01      	add	r6, sp, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	1977      	adds	r7, r6, r5
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:17
        char digits[10];
        uint32_t len = 0;
        // Place digits to buffer
        do {
            uint32_t digit = n % base;
            n /= base;
 8001012:	4618      	mov	r0, r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:18
            digits[len++] = (digit < 10)? '0'+digit : 'A'+digit-10;
 8001014:	f807 2c01 	strb.w	r2, [r7, #-1]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:19
        } while(n > 0);
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ed      	bne.n	8000ff8 <IPutUint.4105+0x8>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:18
        uint32_t len = 0;
        // Place digits to buffer
        do {
            uint32_t digit = n % base;
            n /= base;
            digits[len++] = (digit < 10)? '0'+digit : 'A'+digit-10;
 800101c:	462f      	mov	r7, r5
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:21 (discriminator 1)
        } while(n > 0);
        // Add padding
        for(uint32_t i = len; i < width; i++) {
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	429d      	cmp	r5, r3
 8001022:	d20e      	bcs.n	8001042 <IPutUint.4105+0x52>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:22
            if(zero_padded) PPutChar('0');
 8001024:	7c22      	ldrb	r2, [r4, #16]
 8001026:	68e3      	ldr	r3, [r4, #12]
 8001028:	b10a      	cbz	r2, 800102e <IPutUint.4105+0x3e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:22 (discriminator 1)
 800102a:	2030      	movs	r0, #48	; 0x30
 800102c:	e000      	b.n	8001030 <IPutUint.4105+0x40>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:23
            else            PPutChar(' ');
 800102e:	2020      	movs	r0, #32
 8001030:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:24
            if(++CharCnt >= MaxLength) return;
 8001032:	68a3      	ldr	r3, [r4, #8]
 8001034:	6862      	ldr	r2, [r4, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	4293      	cmp	r3, r2
 800103a:	60a3      	str	r3, [r4, #8]
 800103c:	d20f      	bcs.n	800105e <IPutUint.4105+0x6e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:21
            uint32_t digit = n % base;
            n /= base;
            digits[len++] = (digit < 10)? '0'+digit : 'A'+digit-10;
        } while(n > 0);
        // Add padding
        for(uint32_t i = len; i < width; i++) {
 800103e:	3501      	adds	r5, #1
 8001040:	e7ed      	b.n	800101e <IPutUint.4105+0x2e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:27
            if(zero_padded) PPutChar('0');
            else            PPutChar(' ');
            if(++CharCnt >= MaxLength) return;
        }
        // Print digits
        len = (len < (MaxLength - CharCnt))? len : (MaxLength - CharCnt);
 8001042:	68a3      	ldr	r3, [r4, #8]
 8001044:	6865      	ldr	r5, [r4, #4]
 8001046:	1aed      	subs	r5, r5, r3
 8001048:	42af      	cmp	r7, r5
 800104a:	bf38      	it	cc
 800104c:	463d      	movcc	r5, r7
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:28
        CharCnt += len;
 800104e:	442b      	add	r3, r5
 8001050:	60a3      	str	r3, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:29 (discriminator 1)
        while(len > 0) PPutChar(digits[--len]);
 8001052:	b125      	cbz	r5, 800105e <IPutUint.4105+0x6e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:29 (discriminator 2)
 8001054:	3d01      	subs	r5, #1
 8001056:	68e3      	ldr	r3, [r4, #12]
 8001058:	5d70      	ldrb	r0, [r6, r5]
 800105a:	4798      	blx	r3
 800105c:	e7f9      	b.n	8001052 <IPutUint.4105+0x62>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:30
    } // IPutUint
 800105e:	b005      	add	sp, #20
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001070 <kl_vsprintf>:
kl_vsprintf():
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:5
#include "kl_sprintf.h"
#include <stdint.h>
#include <stdbool.h>

uint32_t kl_vsprintf(ftVoidChar PPutChar, uint32_t MaxLength, const char *format, va_list args) {
 8001070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001074:	461c      	mov	r4, r3
 8001076:	b087      	sub	sp, #28
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:6
    uint32_t CharCnt = 0, width = 0;
 8001078:	2300      	movs	r3, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:5
#include "kl_sprintf.h"
#include <stdint.h>
#include <stdbool.h>

uint32_t kl_vsprintf(ftVoidChar PPutChar, uint32_t MaxLength, const char *format, va_list args) {
 800107a:	9004      	str	r0, [sp, #16]
 800107c:	9102      	str	r1, [sp, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:6
    uint32_t CharCnt = 0, width = 0;
 800107e:	9303      	str	r3, [sp, #12]
 8001080:	9301      	str	r3, [sp, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:7
    bool zero_padded = false;
 8001082:	f88d 3014 	strb.w	r3, [sp, #20]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:34 (discriminator 1)
        while(len > 0) PPutChar(digits[--len]);
    } // IPutUint

    const char *f = format;
    char c;
    while((c = *f++) != 0) {
 8001086:	7810      	ldrb	r0, [r2, #0]
 8001088:	1c56      	adds	r6, r2, #1
 800108a:	b150      	cbz	r0, 80010a2 <kl_vsprintf+0x32>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:35
        if(c != '%') {
 800108c:	2825      	cmp	r0, #37	; 0x25
 800108e:	d00c      	beq.n	80010aa <kl_vsprintf+0x3a>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:36
            PPutChar(c);
 8001090:	9b04      	ldr	r3, [sp, #16]
 8001092:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:37
            if(++CharCnt >= MaxLength) break;
 8001094:	9b03      	ldr	r3, [sp, #12]
 8001096:	9a02      	ldr	r2, [sp, #8]
 8001098:	3301      	adds	r3, #1
 800109a:	4293      	cmp	r3, r2
 800109c:	9303      	str	r3, [sp, #12]
 800109e:	f0c0 8095 	bcc.w	80011cc <kl_vsprintf+0x15c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:89
                if(CharCnt >= MaxLength) break;
            }
        }
        if(CharCnt >= MaxLength) break;
    }
    return CharCnt;
 80010a2:	9803      	ldr	r0, [sp, #12]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:90
}
 80010a4:	b007      	add	sp, #28
 80010a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:43
            else continue;
        }

        // Here goes optional width specification.
        // If it starts with zero (zero_padded is true), it means we use '0' instead of ' ' as a filler.
        width = 0;
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	4611      	mov	r1, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:46
        zero_padded = false;
        while(true) {
            c = *f++;
 80010b0:	f816 3b01 	ldrb.w	r3, [r6], #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:47
            if(c < '0' || c > '9') break;
 80010b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80010b8:	b2c5      	uxtb	r5, r0
 80010ba:	2d09      	cmp	r5, #9
 80010bc:	d807      	bhi.n	80010ce <kl_vsprintf+0x5e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:48
            if((width == 0) && (c == '0')) zero_padded = true;
 80010be:	b912      	cbnz	r2, 80010c6 <kl_vsprintf+0x56>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:48 (discriminator 1)
 80010c0:	2b30      	cmp	r3, #48	; 0x30
 80010c2:	bf08      	it	eq
 80010c4:	2101      	moveq	r1, #1
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:50
            width *= 10;
            width += c-'0';
 80010c6:	230a      	movs	r3, #10
 80010c8:	fb03 0202 	mla	r2, r3, r2, r0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:51
        }
 80010cc:	e7f0      	b.n	80010b0 <kl_vsprintf+0x40>
 80010ce:	9201      	str	r2, [sp, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:53

        if((c == 's') || (c == 'S')) {
 80010d0:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80010d4:	2a53      	cmp	r2, #83	; 0x53
 80010d6:	f88d 1014 	strb.w	r1, [sp, #20]
 80010da:	d110      	bne.n	80010fe <kl_vsprintf+0x8e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:54
            char *s = va_arg(args, char*);
 80010dc:	1d25      	adds	r5, r4, #4
 80010de:	6824      	ldr	r4, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:55 (discriminator 1)
            while((*s != 0) && (CharCnt++ < MaxLength)) PPutChar(*s++);
 80010e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d06b      	beq.n	80011c0 <kl_vsprintf+0x150>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:55 (discriminator 2)
 80010e8:	9b03      	ldr	r3, [sp, #12]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	9203      	str	r2, [sp, #12]
 80010ee:	9a02      	ldr	r2, [sp, #8]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d265      	bcs.n	80011c0 <kl_vsprintf+0x150>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:55 (discriminator 1)
 80010f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 80010f8:	9b04      	ldr	r3, [sp, #16]
 80010fa:	4798      	blx	r3
 80010fc:	e7f0      	b.n	80010e0 <kl_vsprintf+0x70>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:57
        }
        else if(c == 'c') {
 80010fe:	2b63      	cmp	r3, #99	; 0x63
 8001100:	d10b      	bne.n	800111a <kl_vsprintf+0xaa>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:58
            PPutChar(va_arg(args, int));
 8001102:	9b04      	ldr	r3, [sp, #16]
 8001104:	7820      	ldrb	r0, [r4, #0]
 8001106:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:59
            if(++CharCnt >= MaxLength) break;
 8001108:	9b03      	ldr	r3, [sp, #12]
 800110a:	9a02      	ldr	r2, [sp, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	4293      	cmp	r3, r2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:58
        if((c == 's') || (c == 'S')) {
            char *s = va_arg(args, char*);
            while((*s != 0) && (CharCnt++ < MaxLength)) PPutChar(*s++);
        }
        else if(c == 'c') {
            PPutChar(va_arg(args, int));
 8001110:	f104 0504 	add.w	r5, r4, #4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:59
            if(++CharCnt >= MaxLength) break;
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	d353      	bcc.n	80011c0 <kl_vsprintf+0x150>
 8001118:	e7c3      	b.n	80010a2 <kl_vsprintf+0x32>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:61
        }
        else if(c == 'X') IPutUint(va_arg(args, uint32_t), 16);
 800111a:	2b58      	cmp	r3, #88	; 0x58
 800111c:	d105      	bne.n	800112a <kl_vsprintf+0xba>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:61 (discriminator 1)
 800111e:	1d25      	adds	r5, r4, #4
 8001120:	f10d 0c04 	add.w	ip, sp, #4
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	2110      	movs	r1, #16
 8001128:	e006      	b.n	8001138 <kl_vsprintf+0xc8>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:62
        else if(c == 'u') IPutUint(va_arg(args, uint32_t), 10);
 800112a:	2b75      	cmp	r3, #117	; 0x75
 800112c:	d107      	bne.n	800113e <kl_vsprintf+0xce>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:62 (discriminator 1)
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	1d25      	adds	r5, r4, #4
 8001132:	f10d 0c04 	add.w	ip, sp, #4
 8001136:	210a      	movs	r1, #10
 8001138:	f7ff ff5a 	bl	8000ff0 <IPutUint.4105>
 800113c:	e040      	b.n	80011c0 <kl_vsprintf+0x150>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:63
        else if(c == 'd') {
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d111      	bne.n	8001166 <kl_vsprintf+0xf6>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:64
            int32_t n = va_arg(args, int32_t);
 8001142:	1d25      	adds	r5, r4, #4
 8001144:	6824      	ldr	r4, [r4, #0]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:65
            if(n < 0) {
 8001146:	2c00      	cmp	r4, #0
 8001148:	da09      	bge.n	800115e <kl_vsprintf+0xee>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:66
                PPutChar('-');
 800114a:	9b04      	ldr	r3, [sp, #16]
 800114c:	202d      	movs	r0, #45	; 0x2d
 800114e:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:67
                if(++CharCnt >= MaxLength) break;
 8001150:	9b03      	ldr	r3, [sp, #12]
 8001152:	9a02      	ldr	r2, [sp, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	4293      	cmp	r3, r2
 8001158:	9303      	str	r3, [sp, #12]
 800115a:	d2a2      	bcs.n	80010a2 <kl_vsprintf+0x32>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:68
                n = -n;
 800115c:	4264      	negs	r4, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:70
            }
            IPutUint(n, 10);
 800115e:	f10d 0c04 	add.w	ip, sp, #4
 8001162:	4620      	mov	r0, r4
 8001164:	e7e7      	b.n	8001136 <kl_vsprintf+0xc6>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:72
        }
        else if(c == 'A') {
 8001166:	2b41      	cmp	r3, #65	; 0x41
 8001168:	d129      	bne.n	80011be <kl_vsprintf+0x14e>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:76
            uint8_t *arr = va_arg(args, uint8_t*);
            int32_t n = va_arg(args, int32_t);
            int32_t Delimiter = va_arg(args, int32_t);
            zero_padded = true; // Every byte consists of two characters.
 800116a:	2301      	movs	r3, #1
 800116c:	f88d 3014 	strb.w	r3, [sp, #20]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:77
            width = 2;          // ...01 02 0A etc.; not 1 2 A
 8001170:	2302      	movs	r3, #2
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:73
                n = -n;
            }
            IPutUint(n, 10);
        }
        else if(c == 'A') {
            uint8_t *arr = va_arg(args, uint8_t*);
 8001172:	f8d4 9000 	ldr.w	r9, [r4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:74
            int32_t n = va_arg(args, int32_t);
 8001176:	f8d4 8004 	ldr.w	r8, [r4, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:75
            int32_t Delimiter = va_arg(args, int32_t);
 800117a:	f104 050c 	add.w	r5, r4, #12
 800117e:	68a7      	ldr	r7, [r4, #8]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:77
            zero_padded = true; // Every byte consists of two characters.
            width = 2;          // ...01 02 0A etc.; not 1 2 A
 8001180:	9301      	str	r3, [sp, #4]
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:78
            for(int32_t i = 0; i < n; i++) {
 8001182:	2400      	movs	r4, #0
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:78 (discriminator 1)
 8001184:	4544      	cmp	r4, r8
 8001186:	da1b      	bge.n	80011c0 <kl_vsprintf+0x150>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:79
                if((i > 0) && (Delimiter != 0)) {
 8001188:	2c00      	cmp	r4, #0
 800118a:	dc0c      	bgt.n	80011a6 <kl_vsprintf+0x136>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:83
                    PPutChar((char)Delimiter); // do not place delimiter before or after array
                    if(++CharCnt >= MaxLength) break;
                }
                IPutUint(arr[i], 16);
 800118c:	f10d 0c04 	add.w	ip, sp, #4
 8001190:	f819 0004 	ldrb.w	r0, [r9, r4]
 8001194:	2110      	movs	r1, #16
 8001196:	f7ff ff2b 	bl	8000ff0 <IPutUint.4105>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:84
                if(CharCnt >= MaxLength) break;
 800119a:	9b02      	ldr	r3, [sp, #8]
 800119c:	9a03      	ldr	r2, [sp, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d20e      	bcs.n	80011c0 <kl_vsprintf+0x150>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:78
            uint8_t *arr = va_arg(args, uint8_t*);
            int32_t n = va_arg(args, int32_t);
            int32_t Delimiter = va_arg(args, int32_t);
            zero_padded = true; // Every byte consists of two characters.
            width = 2;          // ...01 02 0A etc.; not 1 2 A
            for(int32_t i = 0; i < n; i++) {
 80011a2:	3401      	adds	r4, #1
 80011a4:	e7ee      	b.n	8001184 <kl_vsprintf+0x114>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:79 (discriminator 1)
                if((i > 0) && (Delimiter != 0)) {
 80011a6:	2f00      	cmp	r7, #0
 80011a8:	d0f0      	beq.n	800118c <kl_vsprintf+0x11c>
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:80
                    PPutChar((char)Delimiter); // do not place delimiter before or after array
 80011aa:	9b04      	ldr	r3, [sp, #16]
 80011ac:	b2f8      	uxtb	r0, r7
 80011ae:	4798      	blx	r3
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:81
                    if(++CharCnt >= MaxLength) break;
 80011b0:	9b03      	ldr	r3, [sp, #12]
 80011b2:	9a02      	ldr	r2, [sp, #8]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4293      	cmp	r3, r2
 80011b8:	9303      	str	r3, [sp, #12]
 80011ba:	d3e7      	bcc.n	800118c <kl_vsprintf+0x11c>
 80011bc:	e000      	b.n	80011c0 <kl_vsprintf+0x150>
 80011be:	4625      	mov	r5, r4
C:\OstrannaStudio\Workspace\TemplateL151\Debug/../kl_lib/kl_sprintf.c:87
                }
                IPutUint(arr[i], 16);
                if(CharCnt >= MaxLength) break;
            }
        }
        if(CharCnt >= MaxLength) break;
 80011c0:	9b02      	ldr	r3, [sp, #8]
 80011c2:	9a03      	ldr	r2, [sp, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f4bf af6c 	bcs.w	80010a2 <kl_vsprintf+0x32>
 80011ca:	462c      	mov	r4, r5
 80011cc:	4632      	mov	r2, r6
 80011ce:	e75a      	b.n	8001086 <kl_vsprintf+0x16>

080011d0 <memset>:
memset():
 80011d0:	b4f0      	push	{r4, r5, r6, r7}
 80011d2:	0784      	lsls	r4, r0, #30
 80011d4:	d043      	beq.n	800125e <memset+0x8e>
 80011d6:	1e54      	subs	r4, r2, #1
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d03e      	beq.n	800125a <memset+0x8a>
 80011dc:	b2cd      	uxtb	r5, r1
 80011de:	4603      	mov	r3, r0
 80011e0:	e003      	b.n	80011ea <memset+0x1a>
 80011e2:	1e62      	subs	r2, r4, #1
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d038      	beq.n	800125a <memset+0x8a>
 80011e8:	4614      	mov	r4, r2
 80011ea:	f803 5b01 	strb.w	r5, [r3], #1
 80011ee:	079a      	lsls	r2, r3, #30
 80011f0:	d1f7      	bne.n	80011e2 <memset+0x12>
 80011f2:	2c03      	cmp	r4, #3
 80011f4:	d92a      	bls.n	800124c <memset+0x7c>
 80011f6:	b2cd      	uxtb	r5, r1
 80011f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80011fc:	2c0f      	cmp	r4, #15
 80011fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001202:	d915      	bls.n	8001230 <memset+0x60>
 8001204:	f1a4 0710 	sub.w	r7, r4, #16
 8001208:	093f      	lsrs	r7, r7, #4
 800120a:	f103 0610 	add.w	r6, r3, #16
 800120e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8001212:	461a      	mov	r2, r3
 8001214:	6015      	str	r5, [r2, #0]
 8001216:	6055      	str	r5, [r2, #4]
 8001218:	6095      	str	r5, [r2, #8]
 800121a:	60d5      	str	r5, [r2, #12]
 800121c:	3210      	adds	r2, #16
 800121e:	42b2      	cmp	r2, r6
 8001220:	d1f8      	bne.n	8001214 <memset+0x44>
 8001222:	f004 040f 	and.w	r4, r4, #15
 8001226:	3701      	adds	r7, #1
 8001228:	2c03      	cmp	r4, #3
 800122a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800122e:	d90d      	bls.n	800124c <memset+0x7c>
 8001230:	461e      	mov	r6, r3
 8001232:	4622      	mov	r2, r4
 8001234:	3a04      	subs	r2, #4
 8001236:	2a03      	cmp	r2, #3
 8001238:	f846 5b04 	str.w	r5, [r6], #4
 800123c:	d8fa      	bhi.n	8001234 <memset+0x64>
 800123e:	1f22      	subs	r2, r4, #4
 8001240:	f022 0203 	bic.w	r2, r2, #3
 8001244:	3204      	adds	r2, #4
 8001246:	4413      	add	r3, r2
 8001248:	f004 0403 	and.w	r4, r4, #3
 800124c:	b12c      	cbz	r4, 800125a <memset+0x8a>
 800124e:	b2c9      	uxtb	r1, r1
 8001250:	441c      	add	r4, r3
 8001252:	f803 1b01 	strb.w	r1, [r3], #1
 8001256:	42a3      	cmp	r3, r4
 8001258:	d1fb      	bne.n	8001252 <memset+0x82>
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	4770      	bx	lr
 800125e:	4614      	mov	r4, r2
 8001260:	4603      	mov	r3, r0
 8001262:	e7c6      	b.n	80011f2 <memset+0x22>
	...
$d():
 8001270:	08060403 	.word	0x08060403
 8001274:	2018100c 	.word	0x2018100c
 8001278:	00000030 	.word	0x00000030
 800127c:	00000000 	.word	0x00000000
 8001280:	03020100 	.word	0x03020100
 8001284:	08070604 	.word	0x08070604
 8001288:	00000009 	.word	0x00000009
 800128c:	03020100 	.word	0x03020100
 8001290:	00000004 	.word	0x00000004
	...

080012a0 <ch_debug>:
 80012a0:	6e69616d 11801600 08280404 1814100c     main......(.....
 80012b0:	001d1c00 0000001e 00000000 00000000     ................
 80012c0:	63536863 61655268 28497964 23202c29     chSchReadyI(), #
 80012d0:	00000031 00000000 00000000 00000000     1...............
 80012e0:	656c6469 00000000 00000000 00000000     idle............
 80012f0:	54686322 72436468 65746165 29282249     "chThdCreateI"()
 8001300:	68632200 53646854 72507465 69726f69     ."chThdSetPriori
 8001310:	28227974 68630029 52646854 6d757365     ty"().chThdResum
 8001320:	2c292865 00312320 54686322 6c536468     e(), #1."chThdSl
 8001330:	22706565 63002928 64685468 74697845     eep"().chThdExit
 8001340:	2c292853 00312320 00000000 00000000     S(), #1.........
 8001350:	56686322 74655354 29282249 68632200     "chVTSetI"()."ch
 8001360:	65525456 49746573 00292822 54566863     VTResetI"().chVT
 8001370:	65736552 29284974 3123202c 00000000     ResetI(), #1....
 8001380:	616d6422 65727453 6c416d61 61636f6c     "dmaStreamAlloca
 8001390:	28226574 64220029 7453616d 6d616572     te"()."dmaStream
 80013a0:	656c6552 22657361 64002928 7453616d     Release"().dmaSt
 80013b0:	6d616572 656c6552 28657361 23202c29     reamRelease(), #
 80013c0:	00000031 00000000 00000000 00000000     1...............

080013d0 <_stm32_dma_streams>:
 80013d0:	40026008 40026004 000b0000 4002601c     .`.@.`.@.....`.@
 80013e0:	40026004 000c0104 40026030 40026004     .`.@....0`.@.`.@
 80013f0:	000d0208 40026044 40026004 000e030c     ....D`.@.`.@....
 8001400:	40026058 40026004 000f0410 4002606c     X`.@.`.@....l`.@
 8001410:	40026004 00100514 40026080 40026004     .`.@.....`.@.`.@
 8001420:	00110618 00000000 00000000 00000000     ................
 8001430:	0d004020 20200d00 30202020 20312020      @....     0  1 
 8001440:	20203220 34202033 20352020 20203620      2  3  4  5  6  
 8001450:	38202037 20392020 20204120 43202042     7  8  9  A  B  C
 8001460:	20442020 20204520 250d0046 3a583230       D  E  F..%02X:
 8001470:	20200020 30250020 00205832 00202d2d      .   .%02X .-- .
 8001480:	6c6c6548 5453206f 4c32334d 21313531     Hello STM32L151!
 8001490:	0003000a                                         ..
